{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is WildBeast? \u00b6 WildBeast is a multifunction Discord bot system intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8ball, meme generation, music playback) in your Discord server. It has an extensive per-server customization system with various settings. For people interested in running a WildBeast instance themselves, there is even a sort of API for making your own commands. Brief history \u00b6 WildBeast was originally written by 3 avid coders in 2015. Since then many devs have come and gone, years have rolled by and the bot has continuously matured. It's currently being constantly developed and improved by a multinational team of freelance and hobbyist developers. Version 6 \u00b6 The new version of WildBeast, version 6 (Which this documentation targets) has received considerable overhauls - most noticeably under the hood. If you are running a WB version previous to v6, do not attempt to update your existing instance. Read the migrating page to find out more. Main features \u00b6 These features are available in every WildBeast instance, including our official WildBot! Music streaming from YouTube, SoundCloud and so forth. Classy insults and strokes. Dank meme generator. Useful advice. Moderation commands like kick, ban and so forth. Role commands like addrole, takerole and colorrole. NSFW image fetching via e621 and rule34. Server utilities like welcome messages, server and user info and so forth. High level of customization with an extensive per-server configuration engine. Extensive support and documentation of running your own WildBeast. Customisable tags, courtesy of JagTag-JS A command framework for you to create custom commands (If you're running a custom instance). And much more; check out the command reference and the custom command page for starters! Selfhosting \u00b6 There is extensive support available for those wishing to run WildBeast on their own hardware. Installation guides Windows installation Linux installation Other resources Custom commands ( Legacy version ) Discord server \u00b6 We run a Discord server in which you can test WildBeast's functionality in our own sandbox. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.","title":"Home"},{"location":"#what-is-wildbeast","text":"WildBeast is a multifunction Discord bot system intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8ball, meme generation, music playback) in your Discord server. It has an extensive per-server customization system with various settings. For people interested in running a WildBeast instance themselves, there is even a sort of API for making your own commands.","title":"What is WildBeast?"},{"location":"#brief-history","text":"WildBeast was originally written by 3 avid coders in 2015. Since then many devs have come and gone, years have rolled by and the bot has continuously matured. It's currently being constantly developed and improved by a multinational team of freelance and hobbyist developers.","title":"Brief history"},{"location":"#version-6","text":"The new version of WildBeast, version 6 (Which this documentation targets) has received considerable overhauls - most noticeably under the hood. If you are running a WB version previous to v6, do not attempt to update your existing instance. Read the migrating page to find out more.","title":"Version 6"},{"location":"#main-features","text":"These features are available in every WildBeast instance, including our official WildBot! Music streaming from YouTube, SoundCloud and so forth. Classy insults and strokes. Dank meme generator. Useful advice. Moderation commands like kick, ban and so forth. Role commands like addrole, takerole and colorrole. NSFW image fetching via e621 and rule34. Server utilities like welcome messages, server and user info and so forth. High level of customization with an extensive per-server configuration engine. Extensive support and documentation of running your own WildBeast. Customisable tags, courtesy of JagTag-JS A command framework for you to create custom commands (If you're running a custom instance). And much more; check out the command reference and the custom command page for starters!","title":"Main features"},{"location":"#selfhosting","text":"There is extensive support available for those wishing to run WildBeast on their own hardware. Installation guides Windows installation Linux installation Other resources Custom commands ( Legacy version )","title":"Selfhosting"},{"location":"#discord-server","text":"We run a Discord server in which you can test WildBeast's functionality in our own sandbox. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.","title":"Discord server"},{"location":"commands/","text":"This is the command reference for WildBeast. You can find more elaborative information here on each of the commands currently implemented. Tip Send the message ++help <command> (Prefix may vary) to the bot to get further information on any given command. Gotchas \u00b6 Some commands on this page will have an empty Usage field. This means that the command takes no arguments and is accepted as such. Parameters marked with <placeholders> are supposed to be replaced by other values. Do not incude the actual braces in the command. Similarly, @user placeholders refer to mentions. Parameters surrounded by [brackets] signify parameters that may be omitted. Commands in the NSFW category have been labeled as not safe for work and can only be used in a channel that has been marked as NSFW in the channel settings. Additional command information: Addendums Tag subcommands Settings subcommands Commands \u00b6 Addendums \u00b6 For the colorrole command, a hexadecimal value can be submitted in either #FFFFFF or FFFFFF format. You can get all the available meme types for the meme command by using the command meme templates . The softban command bans a user and then immediately unbans them, deleting their messages without barring future access to the server. The request command supports playing from the following resources: YouTube, SoundCloud, Bandcamp, Twitch, Vimeo, Mixer and raw HTML audio. Tag subcommands \u00b6 The tag command has the following subcommands. All subcommands inherit the permission level of the main command. Tip You can use JagTag formatting with the tag create command. See the JagTag-JS documentation for more information on how. Name Description Usage tag create Create a tag. tag create <name> <content> tag delete Delete a tag. tag delete <name> tag edit Edit an existing tag. tag edit <name> <newcontent> tag owner Return the owner of a tag. tag owner <name> tag random Retrieve a random tag from the database. tag random tag raw Return the raw data of a tag. tag raw <name> Settings subcommands \u00b6 The following settings can be edited with this command. All settings are server-specific and all subcommands inherit the permission level of the main command. Note Translation support is in beta, please see the translation directory for supported languages. Name Description Usage prefix Change the command prefix. settings prefix <newprefix> language Change the language the bot will respond in. settings language <language> welcome Change the welcome message target. settings welcome <#channel/dm> welcomeMessage Change the welcome message that is sent when a new member joins. settings welcomeMessage <message> reset Reset a setting to its default value. settings reset <setting>","title":"Command reference"},{"location":"commands/#gotchas","text":"Some commands on this page will have an empty Usage field. This means that the command takes no arguments and is accepted as such. Parameters marked with <placeholders> are supposed to be replaced by other values. Do not incude the actual braces in the command. Similarly, @user placeholders refer to mentions. Parameters surrounded by [brackets] signify parameters that may be omitted. Commands in the NSFW category have been labeled as not safe for work and can only be used in a channel that has been marked as NSFW in the channel settings. Additional command information: Addendums Tag subcommands Settings subcommands","title":"Gotchas"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#addendums","text":"For the colorrole command, a hexadecimal value can be submitted in either #FFFFFF or FFFFFF format. You can get all the available meme types for the meme command by using the command meme templates . The softban command bans a user and then immediately unbans them, deleting their messages without barring future access to the server. The request command supports playing from the following resources: YouTube, SoundCloud, Bandcamp, Twitch, Vimeo, Mixer and raw HTML audio.","title":"Addendums"},{"location":"commands/#tag-subcommands","text":"The tag command has the following subcommands. All subcommands inherit the permission level of the main command. Tip You can use JagTag formatting with the tag create command. See the JagTag-JS documentation for more information on how. Name Description Usage tag create Create a tag. tag create <name> <content> tag delete Delete a tag. tag delete <name> tag edit Edit an existing tag. tag edit <name> <newcontent> tag owner Return the owner of a tag. tag owner <name> tag random Retrieve a random tag from the database. tag random tag raw Return the raw data of a tag. tag raw <name>","title":"Tag subcommands"},{"location":"commands/#settings-subcommands","text":"The following settings can be edited with this command. All settings are server-specific and all subcommands inherit the permission level of the main command. Note Translation support is in beta, please see the translation directory for supported languages. Name Description Usage prefix Change the command prefix. settings prefix <newprefix> language Change the language the bot will respond in. settings language <language> welcome Change the welcome message target. settings welcome <#channel/dm> welcomeMessage Change the welcome message that is sent when a new member joins. settings welcomeMessage <message> reset Reset a setting to its default value. settings reset <setting>","title":"Settings subcommands"},{"location":"custom_commands/","text":"This document outlines the procedure for writing custom commands for WildBeast. Migrating from versions preceding v6 In WildBeast versions 3 and 4, commands were declared in a very different way - namely, the commands were indexed into files based on category (Whereas version 6 indexes commands individually). The syntax was also vastly different. If you wish to write commands for pre-v6 versions, the Legacy custom commands page details the old approach. Custom command support Some basic JavaScript knowledge is required to write custom commands. Support for doing this will not be provided in addition to what is listed on this page, if the issue does not specifically concern WildBeast. General notes \u00b6 Before you begin If your WildBeast instance has already been set up using the procedure outlined in the Windows or Linux installation guides, namely using Docker, you need to take some additional steps to enable custom commands. See Decoupling from Docker for information on how to do this, and then come back here. Command files are placed into ~/src/commands . Each command is declared in a separate file, preferably with the command name. (I.e if your command is named dankmeme , name the file dankmeme.js .) Commands cannot share names - each must have a name of its own. Property declaration \u00b6 The exported command data describes the command in various ways. Here are the properties that can be defined. A command object consists of a meta object and an fn function. The function gets executed when the command gets ran, while the meta object provides information and modifiers to the command. Both the meta and fn properties must be defined on a command object. Meta object structure \u00b6 Note: An empty Value column implies that there are no specific formatting requirements for the particular property. Property Description Value Type Required help A brief description of what the command does. String Yes usage An example of how to use the command. String No module A category to which the command belongs. String No level The permission level required to run the command. 0-10/Infinity Number Yes timeout A time in milliseconds for which the command will be on cooldown between uses. Number No noDM Whether the command can be used in direct message context or not. Boolean No nsfw Whether the command is NSFW or not. If set, restricts the command usage scope to NSFW channels only. Boolean No alias A list of aliases 1 (Alternative command names) to run the command. Array No addons Addendums to the command's help message. String No permAddons Additional Discord permissions that are required to run the command. Discord permission name (Manage Roles etc.) Array No Testing your commands To verify that your commands pass the above requirements, you can run npm test . Example \u00b6 module . exports = { meta : { help : 'I\\'ll say hello to you!' , usage : '<name>' , module : 'Fun' , level : 0 , timeout : 0 , noDM : false , nsfw : false , alias : [ 'hi' , 'hey' ], addons : [ 'This command can also be used in Direct Messages.' ], permAddons : [ 'Manage Messages' ] }, fn : function ( msg , suffix ) { if ( suffix ) msg . channel . createMessage ( `Hello ${ suffix } !` ) else msg . channel . createMessage ( 'Hello!' ) } } And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire! Aliases must not overwrite existing command names or aliases. \u21a9","title":"Custom commands"},{"location":"custom_commands/#general-notes","text":"Before you begin If your WildBeast instance has already been set up using the procedure outlined in the Windows or Linux installation guides, namely using Docker, you need to take some additional steps to enable custom commands. See Decoupling from Docker for information on how to do this, and then come back here. Command files are placed into ~/src/commands . Each command is declared in a separate file, preferably with the command name. (I.e if your command is named dankmeme , name the file dankmeme.js .) Commands cannot share names - each must have a name of its own.","title":"General notes"},{"location":"custom_commands/#property-declaration","text":"The exported command data describes the command in various ways. Here are the properties that can be defined. A command object consists of a meta object and an fn function. The function gets executed when the command gets ran, while the meta object provides information and modifiers to the command. Both the meta and fn properties must be defined on a command object.","title":"Property declaration"},{"location":"custom_commands/#meta-object-structure","text":"Note: An empty Value column implies that there are no specific formatting requirements for the particular property. Property Description Value Type Required help A brief description of what the command does. String Yes usage An example of how to use the command. String No module A category to which the command belongs. String No level The permission level required to run the command. 0-10/Infinity Number Yes timeout A time in milliseconds for which the command will be on cooldown between uses. Number No noDM Whether the command can be used in direct message context or not. Boolean No nsfw Whether the command is NSFW or not. If set, restricts the command usage scope to NSFW channels only. Boolean No alias A list of aliases 1 (Alternative command names) to run the command. Array No addons Addendums to the command's help message. String No permAddons Additional Discord permissions that are required to run the command. Discord permission name (Manage Roles etc.) Array No Testing your commands To verify that your commands pass the above requirements, you can run npm test .","title":"Meta object structure"},{"location":"custom_commands/#example","text":"module . exports = { meta : { help : 'I\\'ll say hello to you!' , usage : '<name>' , module : 'Fun' , level : 0 , timeout : 0 , noDM : false , nsfw : false , alias : [ 'hi' , 'hey' ], addons : [ 'This command can also be used in Direct Messages.' ], permAddons : [ 'Manage Messages' ] }, fn : function ( msg , suffix ) { if ( suffix ) msg . channel . createMessage ( `Hello ${ suffix } !` ) else msg . channel . createMessage ( 'Hello!' ) } } And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire! Aliases must not overwrite existing command names or aliases. \u21a9","title":"Example"},{"location":"decoupling/","text":"This document outlines the procedure for decoupling WildBeast from Docker and running it from source instead, enabling custom commands and other modifications to the behaviour of it. Preface \u00b6 If you have already set up your WildBeast instance in accordance with the available installation guides, feel free to jump to the next section. If you have not done this yet, however, please follow through with that procedure before embarking onto this guide. Most of the steps assume knowledge of what has been done previously, and as such it is highly recommended to follow proper procedure first. Additionally, be sure to shutdown all existing Docker containers pertaining to WildBeast before proceeding. Reconfiguring containers and WildBeast \u00b6 Port conflicts If you have other services running on ports 8529 or 2333 , select different ports for the sections below. You may encounter errors or conflicts otherwise. However, do not modify the Docker port in contradiction to the guide, or you will have trouble reaching the containers in the desired manner. First, open the .env configuration file in the directory to which you installed the WildBeast source code, and tweak these values as follows: LAVA_NODES =[{ \"host\" : \"localhost\" , \"port\" :2333, \"region\" : \"us\" , \"password\" : \"password\" }] ARANGO_URI = http://localhost:8529 Windows \u00b6 Open Kitematic and browse to the settings of the wildbeast_arango_1 container and go to the Hostname / Ports tab. Under Configure Ports , change the default value to look as follows. Then hit Save. The container will now self-start. Proceed to the Hostname / Ports tab of the wildbeast_lavalink_1 container and edit the same values as previously as follows. And then hit Save as mentioned previously, which will self-start the container. You may also remove the wildbeast_install_1 and wildbeast_wildbeast_1 containers if you do not need them anymore. In future WildBeast will run from the source code as opposed to these images, which makes them redundant. Linux \u00b6 Risk of data loss Due to how Docker works on Linux, the containers created in the installation need to be removed and recreated before their networking can be altered. If you have substantial amounts of data in your database, consult relevant documentation on how to migrate your data - for instance this article . For this section, you need to browse to the WildBeast source code directory. Before you run the following commands, make sure that all WildBeast-related containers have been turned off. This can be checked by running sudo docker ps , and if the output contains no WildBeast-related containers, you're ready to go. Otherwise shut them down and then proceed. sudo docker rm wildbeast_arango_1 sudo docker rm wildbeast_lavalink_1 # Check that the ArangoDB version is the correct one via 'docker images' sudo docker run -d --env-file arangodb.env --name wildbeast_arango_1 -p 8529 :8529 arangodb:3.3.10 sudo docker run -d --env-file lavalink.env --name wildbeast_lavalink_1 -p 2333 :80 fredboat/lavalink:v2 Installing dependencies and starting \u00b6 If you haven't already, browse to the WildBeast source code directory. Run npm i to install the dependencies required to run from source. If you have not yet initialised the database, do so by running npm run dbcreate after the dependency installation command finishes. When the previous step has finished, run npm start in the terminal. If the output of that command resembles the following, you're finished. Security considerations With these steps, the ArangoDB and Lavalink instances are exposed to the local network. They are not exposed to the internet, which increases safety somewhat, but you should still take steps to secure at least your ArangoDB instance against unauthorised access. This can be accomplished by creating a non-root user in the ArangoDB web interface and enabling authentication for the database engine. Refer to relevant documentation on how to do this. Now you can start making modifications to the code and adding custom commands which will be useable to your end users. Do bear in mind that the application process is not backgrounded unlike with Docker, so you may want to look into a process manager/orchestrator like PM2 to keep the process running even if you close your terminal session.","title":"Decoupling from Docker"},{"location":"decoupling/#preface","text":"If you have already set up your WildBeast instance in accordance with the available installation guides, feel free to jump to the next section. If you have not done this yet, however, please follow through with that procedure before embarking onto this guide. Most of the steps assume knowledge of what has been done previously, and as such it is highly recommended to follow proper procedure first. Additionally, be sure to shutdown all existing Docker containers pertaining to WildBeast before proceeding.","title":"Preface"},{"location":"decoupling/#reconfiguring-containers-and-wildbeast","text":"Port conflicts If you have other services running on ports 8529 or 2333 , select different ports for the sections below. You may encounter errors or conflicts otherwise. However, do not modify the Docker port in contradiction to the guide, or you will have trouble reaching the containers in the desired manner. First, open the .env configuration file in the directory to which you installed the WildBeast source code, and tweak these values as follows: LAVA_NODES =[{ \"host\" : \"localhost\" , \"port\" :2333, \"region\" : \"us\" , \"password\" : \"password\" }] ARANGO_URI = http://localhost:8529","title":"Reconfiguring containers and WildBeast"},{"location":"decoupling/#windows","text":"Open Kitematic and browse to the settings of the wildbeast_arango_1 container and go to the Hostname / Ports tab. Under Configure Ports , change the default value to look as follows. Then hit Save. The container will now self-start. Proceed to the Hostname / Ports tab of the wildbeast_lavalink_1 container and edit the same values as previously as follows. And then hit Save as mentioned previously, which will self-start the container. You may also remove the wildbeast_install_1 and wildbeast_wildbeast_1 containers if you do not need them anymore. In future WildBeast will run from the source code as opposed to these images, which makes them redundant.","title":"Windows"},{"location":"decoupling/#linux","text":"Risk of data loss Due to how Docker works on Linux, the containers created in the installation need to be removed and recreated before their networking can be altered. If you have substantial amounts of data in your database, consult relevant documentation on how to migrate your data - for instance this article . For this section, you need to browse to the WildBeast source code directory. Before you run the following commands, make sure that all WildBeast-related containers have been turned off. This can be checked by running sudo docker ps , and if the output contains no WildBeast-related containers, you're ready to go. Otherwise shut them down and then proceed. sudo docker rm wildbeast_arango_1 sudo docker rm wildbeast_lavalink_1 # Check that the ArangoDB version is the correct one via 'docker images' sudo docker run -d --env-file arangodb.env --name wildbeast_arango_1 -p 8529 :8529 arangodb:3.3.10 sudo docker run -d --env-file lavalink.env --name wildbeast_lavalink_1 -p 2333 :80 fredboat/lavalink:v2","title":"Linux"},{"location":"decoupling/#installing-dependencies-and-starting","text":"If you haven't already, browse to the WildBeast source code directory. Run npm i to install the dependencies required to run from source. If you have not yet initialised the database, do so by running npm run dbcreate after the dependency installation command finishes. When the previous step has finished, run npm start in the terminal. If the output of that command resembles the following, you're finished. Security considerations With these steps, the ArangoDB and Lavalink instances are exposed to the local network. They are not exposed to the internet, which increases safety somewhat, but you should still take steps to secure at least your ArangoDB instance against unauthorised access. This can be accomplished by creating a non-root user in the ArangoDB web interface and enabling authentication for the database engine. Refer to relevant documentation on how to do this. Now you can start making modifications to the code and adding custom commands which will be useable to your end users. Do bear in mind that the application process is not backgrounded unlike with Docker, so you may want to look into a process manager/orchestrator like PM2 to keep the process running even if you close your terminal session.","title":"Installing dependencies and starting"},{"location":"install_linux/","text":"This guide will detail how to install and setup WildBeast on Linux. Prerequisites \u00b6 Linux system OS: Docker officially supports these distributions , but others may be used as well Sudo privileges on the server You will also need a text editor. For command-line you may use Nano, Vim etc. while standalone editors like Visual Studio Code, Atom and Brackets are fine for systems with a desktop environment installed. Installation \u00b6 You will need to install Docker and Docker Compose to use WildBeast. Find the guide for your distribution here (Docker) and here (Compose) . For other distributions, you may use your own resources. You will also need Git for downloading WildBeast. Git is available on most distribution-specific package managers. Refer to an instruction manual for your distribution for installation instructions. Complete the appropriate installation procedure and verify Docker is functional before proceeding. Setup \u00b6 With that done, clone the WildBeast GitHub repository by running git clone https://github.com/TheSharks/WildBeast.git . After cloning, change to the WildBeast directory and open .env.example with your preferred text editor. Edit the following parameters: BOT_TOKEN : Add your Discord bot token here. (Eg. create a bot and add it to a server ) BOT_PREFIX : Add your preferred command prefix here. (Eg. ! , ++ , etc.) WILDBEAST_MASTERS : Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg. 152664793587777537|10790402390177792 and so on) If you're running a custom ArangoDB instance and wish to use it, you can also edit ARANGO_USERNAME , ARANGO_PASSWORD , ARANGO_DATABASE and ARANGO_URI now. The same goes for the LAVA_NODES variable in case you're running a custom Lavalink instance. When done, save the file as .env . Then run sudo docker-compose up --no-start in the WildBeast directory. When the container creation is done, run sudo docker ps -a and make sure that you have an output that resembles the following. Warning It is paramount you save the file as .env . Do not leave it as .env.example , name it .env.txt or anything similar. Docker will not recognise it in this case. Known docker-compose issues On certain systems or setups Docker may refuse to run commands properly without sudo and will throw cryptic errors as a result. Try running the command with sudo before consulting help and also check your system process control to see if Docker is running. Initialising \u00b6 To initialise WildBeast, run the following commands. Leave a second or two between each to account for startup times. Note If you configured a custom ArangoDB instance previously, omit the first command. sudo docker start wildbeast_arango_1 sudo docker start wildbeast_install_1 sudo docker logs wildbeast_install_1 If your output resembles the following, you're good to go. After this, you will no longer need to run wildbeast_install_1 unless you wish to repair the database - it's only around for database initialisation. Configuration \u00b6 Now it's time to do some additional configuration. The minimum defaults have been defined already through docker-compose.yml, but the bot will only have fairly limited functionality if left at this state. Open .env again. Here is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below. Variable Description Commands using this Type IMGFLIP_USERNAME Imgflip username. 1 meme String IMGFLIP_PASSWORD Imgflip password. 1 meme String IMGUR_KEY Imgur API key. 2 randommeme String TWITCH_ID Twitch client ID. 3 twitch String WILDBEAST_VOICE_PERSIST Prevent the bot from automatically leaving a voice channel after a playlist has ended. Music Number (0/1) 4 WILDBEAT_DISABLE_MUSIC Prevent all music functionality from being used. Music Number (0/1) 4 WILDBEAST_LANGUAGE Set the language of the bot. Currently only English is available. All String Tip There are more environment variables that can be defined as well. You can find the full reference in .env.example . However, we do not recommend editing variables in the Internal configuration section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with. When you're done, save the file and close the editor. Running the bot \u00b6 Note If you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers. Your WildBeast instance should now be good to go. Run the following commands in your terminal, waiting a second or two between each: sudo docker start wildbeast_arango_1 # If you didn't start it or stopped it sudo docker start wildbeast_lavalink_1 sudo docker start wildbeast_wildbeast_1 sudo docker logs wildbeast_wildbeast_1 If your output resembles the following, your bot is all set. Connect ECONNREFUSED <IP>:80 An error message saying FATAL: Error: connect ECONNREFUSED <your IP>:80 may happen when the wildbeast_wildbeast_1 container is started too quickly and the Lavalink server is not ready. Wait a few seconds, then run sudo docker restart wildbeast_wildbeast_1 and check the logs again. Custom commands If you wish to use the custom command aspect of WildBeast, or intend to make tweaks to the source code later down the line, follow the Decoupling from Docker guide now. Due to how Docker works, data created in the ArangoDB container created here is non-transferable. You can test the bot by running the ping command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up. If you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below. Enjoy your bot and have fun! Go to https://imgflip.com , create an account and input your username and password here. \u21a9 \u21a9 Go to https://www.twitch.tv/settings/connections , register an application and input the client ID you get from that here. \u21a9 Go to https://api.imgur.com/oauth2/addclient , register an application and input the client ID (Not secret!) you get from that here. \u21a9 Set to 1 to enable this behaviour, or to 0 to disable it. \u21a9 \u21a9","title":"Linux installation"},{"location":"install_linux/#prerequisites","text":"Linux system OS: Docker officially supports these distributions , but others may be used as well Sudo privileges on the server You will also need a text editor. For command-line you may use Nano, Vim etc. while standalone editors like Visual Studio Code, Atom and Brackets are fine for systems with a desktop environment installed.","title":"Prerequisites"},{"location":"install_linux/#installation","text":"You will need to install Docker and Docker Compose to use WildBeast. Find the guide for your distribution here (Docker) and here (Compose) . For other distributions, you may use your own resources. You will also need Git for downloading WildBeast. Git is available on most distribution-specific package managers. Refer to an instruction manual for your distribution for installation instructions. Complete the appropriate installation procedure and verify Docker is functional before proceeding.","title":"Installation"},{"location":"install_linux/#setup","text":"With that done, clone the WildBeast GitHub repository by running git clone https://github.com/TheSharks/WildBeast.git . After cloning, change to the WildBeast directory and open .env.example with your preferred text editor. Edit the following parameters: BOT_TOKEN : Add your Discord bot token here. (Eg. create a bot and add it to a server ) BOT_PREFIX : Add your preferred command prefix here. (Eg. ! , ++ , etc.) WILDBEAST_MASTERS : Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg. 152664793587777537|10790402390177792 and so on) If you're running a custom ArangoDB instance and wish to use it, you can also edit ARANGO_USERNAME , ARANGO_PASSWORD , ARANGO_DATABASE and ARANGO_URI now. The same goes for the LAVA_NODES variable in case you're running a custom Lavalink instance. When done, save the file as .env . Then run sudo docker-compose up --no-start in the WildBeast directory. When the container creation is done, run sudo docker ps -a and make sure that you have an output that resembles the following. Warning It is paramount you save the file as .env . Do not leave it as .env.example , name it .env.txt or anything similar. Docker will not recognise it in this case. Known docker-compose issues On certain systems or setups Docker may refuse to run commands properly without sudo and will throw cryptic errors as a result. Try running the command with sudo before consulting help and also check your system process control to see if Docker is running.","title":"Setup"},{"location":"install_linux/#initialising","text":"To initialise WildBeast, run the following commands. Leave a second or two between each to account for startup times. Note If you configured a custom ArangoDB instance previously, omit the first command. sudo docker start wildbeast_arango_1 sudo docker start wildbeast_install_1 sudo docker logs wildbeast_install_1 If your output resembles the following, you're good to go. After this, you will no longer need to run wildbeast_install_1 unless you wish to repair the database - it's only around for database initialisation.","title":"Initialising"},{"location":"install_linux/#configuration","text":"Now it's time to do some additional configuration. The minimum defaults have been defined already through docker-compose.yml, but the bot will only have fairly limited functionality if left at this state. Open .env again. Here is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below. Variable Description Commands using this Type IMGFLIP_USERNAME Imgflip username. 1 meme String IMGFLIP_PASSWORD Imgflip password. 1 meme String IMGUR_KEY Imgur API key. 2 randommeme String TWITCH_ID Twitch client ID. 3 twitch String WILDBEAST_VOICE_PERSIST Prevent the bot from automatically leaving a voice channel after a playlist has ended. Music Number (0/1) 4 WILDBEAT_DISABLE_MUSIC Prevent all music functionality from being used. Music Number (0/1) 4 WILDBEAST_LANGUAGE Set the language of the bot. Currently only English is available. All String Tip There are more environment variables that can be defined as well. You can find the full reference in .env.example . However, we do not recommend editing variables in the Internal configuration section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with. When you're done, save the file and close the editor.","title":"Configuration"},{"location":"install_linux/#running-the-bot","text":"Note If you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers. Your WildBeast instance should now be good to go. Run the following commands in your terminal, waiting a second or two between each: sudo docker start wildbeast_arango_1 # If you didn't start it or stopped it sudo docker start wildbeast_lavalink_1 sudo docker start wildbeast_wildbeast_1 sudo docker logs wildbeast_wildbeast_1 If your output resembles the following, your bot is all set. Connect ECONNREFUSED <IP>:80 An error message saying FATAL: Error: connect ECONNREFUSED <your IP>:80 may happen when the wildbeast_wildbeast_1 container is started too quickly and the Lavalink server is not ready. Wait a few seconds, then run sudo docker restart wildbeast_wildbeast_1 and check the logs again. Custom commands If you wish to use the custom command aspect of WildBeast, or intend to make tweaks to the source code later down the line, follow the Decoupling from Docker guide now. Due to how Docker works, data created in the ArangoDB container created here is non-transferable. You can test the bot by running the ping command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up. If you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below. Enjoy your bot and have fun! Go to https://imgflip.com , create an account and input your username and password here. \u21a9 \u21a9 Go to https://www.twitch.tv/settings/connections , register an application and input the client ID you get from that here. \u21a9 Go to https://api.imgur.com/oauth2/addclient , register an application and input the client ID (Not secret!) you get from that here. \u21a9 Set to 1 to enable this behaviour, or to 0 to disable it. \u21a9 \u21a9","title":"Running the bot"},{"location":"install_windows/","text":"This guide will detail how to install and setup WildBeast on Windows. Prerequisites \u00b6 Windows system Minimum: Windows 10 Home 64-bit (Additional dependencies required) Recommended: Windows 10 Professional or Enterprise 64-bit Administrator access You will also need a text editor other than Windows Notepad. Notepad++, Visual Studio Code or any of the sort will suffice. Installation \u00b6 Note about Windows 10 Home Windows 10 Home lacks native virtualisation support, namely Hyper-V, which is used by Docker. Before you read on, find out your edition of Windows from either the Settings app ( Settings\\System\\About ) or the Control Panel ( Control Panel\\System and Security\\System ). Installing Docker \u00b6 You will need to install Docker Community Edition and Kitematic to use WildBeast. Depending on your operating system, the procedure will slightly differ. If you are using W10 Professional or Enterprise, follow the instructions to install Docker on Windows and Kitematic . If you are using W10 Home, follow the instructions to install Docker Toolbox . Complete the appropriate installation procedure and verify Docker is functional before proceeding. Installing Git \u00b6 It is highly recommended to use Git to retrieve WildBeast instead of downloading a ZIP package from GitHub for ease of updating later down the line. Download Git and install it with the following options: Features: Desktop icon, Explorer integration and TrueType console font can be omitted at will Text editor: Your personal preference Use Git from the Windows Command Prompt ( Important! ) Use OpenSSH and OpenSSL ( Important! ) Checkout as-is, commit Unix-style line endings Use MinTTY (If you're installing Git Bash) Additional options: Your personal preference Setup \u00b6 With that done, clone the WildBeast GitHub repository by running git clone https://github.com/TheSharks/WildBeast.git in a terminal window. After cloning, change to the WildBeast directory and open .env.example with your preferred text editor. Edit the following parameters: BOT_TOKEN : Add your Discord bot token here. (Eg. create a bot and add it to a server ) BOT_PREFIX : Add your preferred command prefix here. (Eg. ! , ++ , etc.) WILDBEAST_MASTERS : Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg. 152664793587777537|10790402390177792 and so on) If you're running a custom ArangoDB instance and wish to use it, you can also edit ARANGO_USERNAME , ARANGO_PASSWORD , ARANGO_DATABASE and ARANGO_URI now. The same goes for the LAVA_NODES variable in case you're running a custom Lavalink instance. When done, save the file as .env . Then run docker-compose up --no-start in the WildBeast directory. When the container creation is done, open Kitematic and you should have the following containers present. Warning It is paramount you save the file as .env . Do not leave it as .env.example , name it .env.txt or anything similar. Docker will not recognise it in this case. Known docker-compose issues Docker Toolbox does not start automatically with Windows out of the box - it needs to be started explicitly. Thus, if you do not perform this step, you may run into cryptic errors when attempting to compose. These errors are known to arise: Could not connect to Docker daemon Windows named pipe error: The system cannot find the file specified Docker Toolbox should create a desktop icon called Docker Quickstart Terminal upon installation. Start it, wait for it to completely start (Until it shows Start interactive shell ), restart your terminal and run the compose command again. Initialising \u00b6 To initialise WildBeast, start the following containers in the following order. Wait for one to finish before proceeding. Note If you configured a custom ArangoDB instance previously, omit the first step. wildbeast_arango_1 wildbeast_install_1 You may have to hit Ctrl + R in order to refresh and see the container output. The install container will self-exit when done. After this you do not need to run wildbeast_install_1 again, as this only initialises the database. You can run it again if you wish to repair your database, however. Configuration \u00b6 Open the settings for the wildbeast_wildbeast_1 container and check the Environment Variables tab. The minimum defaults were defined previously, but the bot will only have fairly limited functionality if left at this state. Here is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below. Variable Description Commands using this Type IMGFLIP_USERNAME Imgflip username. 1 meme String IMGFLIP_PASSWORD Imgflip password. 1 meme String IMGUR_KEY Imgur API key. 2 randommeme String TWITCH_ID Twitch client ID. 3 twitch String WILDBEAST_VOICE_PERSIST Prevent the bot from automatically leaving a voice channel after a playlist has ended. Music Number (0/1) 4 WILDBEAT_DISABLE_MUSIC Prevent all music functionality from being used. Music Number (0/1) 4 WILDBEAST_LANGUAGE Set the language of the bot. Currently only English is available. All String Tip There are more environment variables that can be defined as well. You can find the full reference in .env.example . However, we do not recommend editing variables in the Internal configuration section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with. Running the bot \u00b6 Note If you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers. Your WildBeast instance should now be good to go. Start both the wildbeast_arango_1 and wildbeast_lavalink_1 containers, and when they're ready, start wildbeast_wildbeast_1 . Wait for it to start, and if your output roughly resembles the following, you're set. You can test the bot by running the ping command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up. If you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below. Enjoy your bot and have fun! Go to https://imgflip.com , create an account and input your username and password here. \u21a9 \u21a9 Go to https://www.twitch.tv/settings/connections , register an application and input the client ID you get from that here. \u21a9 Go to https://api.imgur.com/oauth2/addclient , register an application and input the client ID (Not secret!) you get from that here. \u21a9 Set to 1 to enable this behaviour, or to 0 to disable it. \u21a9 \u21a9","title":"Windows installation"},{"location":"install_windows/#prerequisites","text":"Windows system Minimum: Windows 10 Home 64-bit (Additional dependencies required) Recommended: Windows 10 Professional or Enterprise 64-bit Administrator access You will also need a text editor other than Windows Notepad. Notepad++, Visual Studio Code or any of the sort will suffice.","title":"Prerequisites"},{"location":"install_windows/#installation","text":"Note about Windows 10 Home Windows 10 Home lacks native virtualisation support, namely Hyper-V, which is used by Docker. Before you read on, find out your edition of Windows from either the Settings app ( Settings\\System\\About ) or the Control Panel ( Control Panel\\System and Security\\System ).","title":"Installation"},{"location":"install_windows/#installing-docker","text":"You will need to install Docker Community Edition and Kitematic to use WildBeast. Depending on your operating system, the procedure will slightly differ. If you are using W10 Professional or Enterprise, follow the instructions to install Docker on Windows and Kitematic . If you are using W10 Home, follow the instructions to install Docker Toolbox . Complete the appropriate installation procedure and verify Docker is functional before proceeding.","title":"Installing Docker"},{"location":"install_windows/#installing-git","text":"It is highly recommended to use Git to retrieve WildBeast instead of downloading a ZIP package from GitHub for ease of updating later down the line. Download Git and install it with the following options: Features: Desktop icon, Explorer integration and TrueType console font can be omitted at will Text editor: Your personal preference Use Git from the Windows Command Prompt ( Important! ) Use OpenSSH and OpenSSL ( Important! ) Checkout as-is, commit Unix-style line endings Use MinTTY (If you're installing Git Bash) Additional options: Your personal preference","title":"Installing Git"},{"location":"install_windows/#setup","text":"With that done, clone the WildBeast GitHub repository by running git clone https://github.com/TheSharks/WildBeast.git in a terminal window. After cloning, change to the WildBeast directory and open .env.example with your preferred text editor. Edit the following parameters: BOT_TOKEN : Add your Discord bot token here. (Eg. create a bot and add it to a server ) BOT_PREFIX : Add your preferred command prefix here. (Eg. ! , ++ , etc.) WILDBEAST_MASTERS : Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg. 152664793587777537|10790402390177792 and so on) If you're running a custom ArangoDB instance and wish to use it, you can also edit ARANGO_USERNAME , ARANGO_PASSWORD , ARANGO_DATABASE and ARANGO_URI now. The same goes for the LAVA_NODES variable in case you're running a custom Lavalink instance. When done, save the file as .env . Then run docker-compose up --no-start in the WildBeast directory. When the container creation is done, open Kitematic and you should have the following containers present. Warning It is paramount you save the file as .env . Do not leave it as .env.example , name it .env.txt or anything similar. Docker will not recognise it in this case. Known docker-compose issues Docker Toolbox does not start automatically with Windows out of the box - it needs to be started explicitly. Thus, if you do not perform this step, you may run into cryptic errors when attempting to compose. These errors are known to arise: Could not connect to Docker daemon Windows named pipe error: The system cannot find the file specified Docker Toolbox should create a desktop icon called Docker Quickstart Terminal upon installation. Start it, wait for it to completely start (Until it shows Start interactive shell ), restart your terminal and run the compose command again.","title":"Setup"},{"location":"install_windows/#initialising","text":"To initialise WildBeast, start the following containers in the following order. Wait for one to finish before proceeding. Note If you configured a custom ArangoDB instance previously, omit the first step. wildbeast_arango_1 wildbeast_install_1 You may have to hit Ctrl + R in order to refresh and see the container output. The install container will self-exit when done. After this you do not need to run wildbeast_install_1 again, as this only initialises the database. You can run it again if you wish to repair your database, however.","title":"Initialising"},{"location":"install_windows/#configuration","text":"Open the settings for the wildbeast_wildbeast_1 container and check the Environment Variables tab. The minimum defaults were defined previously, but the bot will only have fairly limited functionality if left at this state. Here is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below. Variable Description Commands using this Type IMGFLIP_USERNAME Imgflip username. 1 meme String IMGFLIP_PASSWORD Imgflip password. 1 meme String IMGUR_KEY Imgur API key. 2 randommeme String TWITCH_ID Twitch client ID. 3 twitch String WILDBEAST_VOICE_PERSIST Prevent the bot from automatically leaving a voice channel after a playlist has ended. Music Number (0/1) 4 WILDBEAT_DISABLE_MUSIC Prevent all music functionality from being used. Music Number (0/1) 4 WILDBEAST_LANGUAGE Set the language of the bot. Currently only English is available. All String Tip There are more environment variables that can be defined as well. You can find the full reference in .env.example . However, we do not recommend editing variables in the Internal configuration section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with.","title":"Configuration"},{"location":"install_windows/#running-the-bot","text":"Note If you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers. Your WildBeast instance should now be good to go. Start both the wildbeast_arango_1 and wildbeast_lavalink_1 containers, and when they're ready, start wildbeast_wildbeast_1 . Wait for it to start, and if your output roughly resembles the following, you're set. You can test the bot by running the ping command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up. If you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below. Enjoy your bot and have fun! Go to https://imgflip.com , create an account and input your username and password here. \u21a9 \u21a9 Go to https://www.twitch.tv/settings/connections , register an application and input the client ID you get from that here. \u21a9 Go to https://api.imgur.com/oauth2/addclient , register an application and input the client ID (Not secret!) you get from that here. \u21a9 Set to 1 to enable this behaviour, or to 0 to disable it. \u21a9 \u21a9","title":"Running the bot"},{"location":"legacy_custom_commands/","text":"This document outlines the procedure for writing custom commands for WildBeast versions previous to version 6. Legacy content ahead This guide is no longer being updated after the release of WildBeast v6. It is highly recommended to migrate to v6 if possible as v4 is no longer supported. Custom command support Some basic JavaScript knowledge is required to write custom commands. Support for doing this will not be provided in addition to what is listed on this page, if the issue does not specifically concern WildBeast. Intro \u00b6 Starting at version 3.0.0, WildBeast allows for the addition of user created JavaScript files with commands, given that they are written in the exact same format as default files. This page provides you with the tools you need to create your own commands. Important notes \u00b6 Files need to declare commands to an array, and the array needs to be exported as Commands . In practice: var Commands = [] and exports . Commands = Commands Your command files must be in the custom folder within the commands folder. The path would therefore be ~/WildBeast/runtime/commands/custom . Commands are objects added to an array . Aliases can't be shared between commands. This means that a custom command can't have the same alias as a default command. The bot will stop itself from running and spit out an error if this happens, for safety reasons. Any functions that use for instance config fields and so forth need to be imported in the format ../../file.ext or ../file.ext depending on what folder the file is in. Property declaration \u00b6 Command objects consist of different properties which define how the command runs. There are mandatory properties and optional properties, divided into their own lists. The command callback name is decided by the <cmdname> placeholder in Commands.<cmdname> . Property scheme \u00b6 Mandatory properties Property Type Description name String Command name for the help module, not callback name! See above. help String Message displayed when help <command> is called on the command. level String / Number Minimum user access level (0-3 int) required to execute this command. Set to 'master' to restrict usage to config-defined master users. fn Function Defines the JavaScript function to execute when the command is called. Optional properties Property Type Description noDM Boolean Whether to allow usage in direct messages. Default true. timeout Number Unsigned integer that defines how long a command will be on timeout before it's usable again. The number represents seconds. usage String The example of how the command is used when help <command> is called on the command. overwrite Boolean Whether to accept this command instead of the default one, in case the callback name is the same. Default false. aliases Array < String > Hardcoded aliases to call this command with in addition to the default callback name. hidden Boolean Whether to hide the command from the command list returned with help . Default false. Example structure \u00b6 Simple command example: const Commands = [] // Declaration of the command array Commands . ping = { name : 'ping' , help : 'Check if I still live.' timeout : 10 , overwrite : true , // WildBeast already has a command called ping, will overwrite with this aliases : [ 'pong' ], level : 0 , fn : function ( msg ) { msg . channel . sendMessage ( 'I LIVE' ) } } exports . Commands = Commands // Expose the commands to the commandcontrol module Example of command that uses an external module: const Commands = [] // Declaration of the command array const config = require ( '../../../config.json' ) // Import config Commands . prefix = { name : 'prefix' , help : 'Ask the bot what the configured prefix is.' timeout : 30 , overwrite : true , level : 'master' , fn : function ( msg ) { msg . channel . sendMessage ( 'My prefix is ' + config . prefix ) } } exports . Commands = Commands // Expose the commands to the commandcontrol module And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!","title":"Legacy custom commands"},{"location":"legacy_custom_commands/#intro","text":"Starting at version 3.0.0, WildBeast allows for the addition of user created JavaScript files with commands, given that they are written in the exact same format as default files. This page provides you with the tools you need to create your own commands.","title":"Intro"},{"location":"legacy_custom_commands/#important-notes","text":"Files need to declare commands to an array, and the array needs to be exported as Commands . In practice: var Commands = [] and exports . Commands = Commands Your command files must be in the custom folder within the commands folder. The path would therefore be ~/WildBeast/runtime/commands/custom . Commands are objects added to an array . Aliases can't be shared between commands. This means that a custom command can't have the same alias as a default command. The bot will stop itself from running and spit out an error if this happens, for safety reasons. Any functions that use for instance config fields and so forth need to be imported in the format ../../file.ext or ../file.ext depending on what folder the file is in.","title":"Important notes"},{"location":"legacy_custom_commands/#property-declaration","text":"Command objects consist of different properties which define how the command runs. There are mandatory properties and optional properties, divided into their own lists. The command callback name is decided by the <cmdname> placeholder in Commands.<cmdname> .","title":"Property declaration"},{"location":"legacy_custom_commands/#property-scheme","text":"Mandatory properties Property Type Description name String Command name for the help module, not callback name! See above. help String Message displayed when help <command> is called on the command. level String / Number Minimum user access level (0-3 int) required to execute this command. Set to 'master' to restrict usage to config-defined master users. fn Function Defines the JavaScript function to execute when the command is called. Optional properties Property Type Description noDM Boolean Whether to allow usage in direct messages. Default true. timeout Number Unsigned integer that defines how long a command will be on timeout before it's usable again. The number represents seconds. usage String The example of how the command is used when help <command> is called on the command. overwrite Boolean Whether to accept this command instead of the default one, in case the callback name is the same. Default false. aliases Array < String > Hardcoded aliases to call this command with in addition to the default callback name. hidden Boolean Whether to hide the command from the command list returned with help . Default false.","title":"Property scheme"},{"location":"legacy_custom_commands/#example-structure","text":"Simple command example: const Commands = [] // Declaration of the command array Commands . ping = { name : 'ping' , help : 'Check if I still live.' timeout : 10 , overwrite : true , // WildBeast already has a command called ping, will overwrite with this aliases : [ 'pong' ], level : 0 , fn : function ( msg ) { msg . channel . sendMessage ( 'I LIVE' ) } } exports . Commands = Commands // Expose the commands to the commandcontrol module Example of command that uses an external module: const Commands = [] // Declaration of the command array const config = require ( '../../../config.json' ) // Import config Commands . prefix = { name : 'prefix' , help : 'Ask the bot what the configured prefix is.' timeout : 30 , overwrite : true , level : 'master' , fn : function ( msg ) { msg . channel . sendMessage ( 'My prefix is ' + config . prefix ) } } exports . Commands = Commands // Expose the commands to the commandcontrol module And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!","title":"Example structure"},{"location":"migrating/","text":"This document outlines the migration procedure from WildBeast version 4 and prior to WildBeast version 6. Introduction \u00b6 WildBeast version 6 has been in development for nearly a year at the time of writing and has now released. While on the user end very little has changed, the newest release has received a complete overhaul under the hood. Main changes \u00b6 WildBeast now uses ArangoDB for data storage instead of RethinkDB. Command indexing has been changed. Commands are stored in individual files, as opposed to categorical sorting. WildBeast has moved to Eris as Discord library, instead of using Discordie. Configuration has been moved away from static files into environment variables using dotenv . The installation procedure has received a major shift. Installation is now performed using Docker instead of manually installing dependencies. WildBeast now uses JagTag-JS for tag scripting, as opposed to TagScript . Audio is now encoded with Lavalink instead of FFMPEG. Notice to selfhosters \u00b6 In practice, this means that: Data stored by WildBeast <= v4 instances is not compatible with v6. Commands written for <= v4 instances are not compatible with v6. Configuration for <= v4 instances is not compatible with v6. The dependencies installed by <= v4 instances are largely extraneous . As you can probably infer from this, v6 is a breaking change of the highest caliber. If you wish to retain any data you have in your current instance, DO NOT UPDATE. V4 will no longer receive support, but you may still continue running it if you wish to retain your data. If you do not have data you care for in your instance, here is what improvements you can expect from v6 as opposed to v4. Streamlined installation procedure : Installaton via Docker makes the installation quick and virtually effortless. Reduced disk footprint : Due to WB using proprietary JagTag-JS technology for tag scripting, Python 2.7 and C++ build tools are no longer required. Better sound quality and music performance : Lavalink is now used for encoding, which results in better sound quality with a fraction of the memory footprint of FFMPEG. TL;DR \u00b6 WildBeast v4 is in no way compatible with v6. If you wish to retain your data, do not update. Otherwise you may follow the installation procedure for Windows or Linux from the menu on the left.","title":"Migrating v4 => v6"},{"location":"migrating/#introduction","text":"WildBeast version 6 has been in development for nearly a year at the time of writing and has now released. While on the user end very little has changed, the newest release has received a complete overhaul under the hood.","title":"Introduction"},{"location":"migrating/#main-changes","text":"WildBeast now uses ArangoDB for data storage instead of RethinkDB. Command indexing has been changed. Commands are stored in individual files, as opposed to categorical sorting. WildBeast has moved to Eris as Discord library, instead of using Discordie. Configuration has been moved away from static files into environment variables using dotenv . The installation procedure has received a major shift. Installation is now performed using Docker instead of manually installing dependencies. WildBeast now uses JagTag-JS for tag scripting, as opposed to TagScript . Audio is now encoded with Lavalink instead of FFMPEG.","title":"Main changes"},{"location":"migrating/#notice-to-selfhosters","text":"In practice, this means that: Data stored by WildBeast <= v4 instances is not compatible with v6. Commands written for <= v4 instances are not compatible with v6. Configuration for <= v4 instances is not compatible with v6. The dependencies installed by <= v4 instances are largely extraneous . As you can probably infer from this, v6 is a breaking change of the highest caliber. If you wish to retain any data you have in your current instance, DO NOT UPDATE. V4 will no longer receive support, but you may still continue running it if you wish to retain your data. If you do not have data you care for in your instance, here is what improvements you can expect from v6 as opposed to v4. Streamlined installation procedure : Installaton via Docker makes the installation quick and virtually effortless. Reduced disk footprint : Due to WB using proprietary JagTag-JS technology for tag scripting, Python 2.7 and C++ build tools are no longer required. Better sound quality and music performance : Lavalink is now used for encoding, which results in better sound quality with a fraction of the memory footprint of FFMPEG.","title":"Notice to selfhosters"},{"location":"migrating/#tldr","text":"WildBeast v4 is in no way compatible with v6. If you wish to retain your data, do not update. Otherwise you may follow the installation procedure for Windows or Linux from the menu on the left.","title":"TL;DR"}]}