{
    "docs": [
        {
            "location": "/",
            "text": "What is WildBeast?\n\u00b6\n\n\nWildBeast is a multifunction Discord bot system intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8ball, meme generation, music playback) in your Discord server. It has an extensive per-server customization system with various settings. For people interested in running a WildBeast instance themselves, there is even a sort of API for making your own commands.\n\n\nBrief history\n\u00b6\n\n\nWildBeast was originally written by 3 avid coders in 2015. Since then many devs have come and gone, years have rolled by and the bot has continuously matured. It's currently being constantly developed and improved by a multinational team of freelance and hobbyist developers.\n\n\nVersion 6\n\u00b6\n\n\nThe new version of WildBeast, version 6 (Which this documentation targets) has received considerable overhauls - most noticeably under the hood. If you are running a WB version previous to v6, \ndo not attempt to update your existing instance.\n Read the \nmigrating\n page to find out more.\n\n\nMain features\n\u00b6\n\n\nThese features are available in every WildBeast instance, including our official WildBot!\n\n\n\n\nMusic streaming from YouTube, SoundCloud and so forth.\n\n\nClassy insults and strokes.\n\n\nDank meme generator.\n\n\nUseful advice.\n\n\nModeration commands like kick, ban and so forth.\n\n\nRole commands like addrole, takerole and colorrole.\n\n\nNSFW image fetching via e621 and rule34.\n\n\nServer utilities like welcome messages, server and user info and so forth.\n\n\nHigh level of customization with an extensive per-server configuration engine.\n\n\nExtensive support and documentation of running your own WildBeast.\n\n\nCustomisable tags, courtesy of \nJagTag-JS\n\n\nA command framework for you to create custom commands (If you're running a custom instance).\n\n\n\n\nAnd much more; check out \nthe command reference\n and \nthe custom command page\n for starters!\n\n\nSelfhosting\n\u00b6\n\n\nThere is extensive support available for those wishing to run WildBeast on their own hardware.\n\n\nInstallation guides\n\n\n\n\nWindows installation\n\n\nLinux installation\n\n\n\n\nOther resources\n\n\n\n\nCustom commands\n (\nLegacy version\n)\n\n\n\n\nDiscord server\n\u00b6\n\n\nWe run a Discord server in which you can test WildBeast's functionality in our own sandbox. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.",
            "title": "Home"
        },
        {
            "location": "/#what-is-wildbeast",
            "text": "WildBeast is a multifunction Discord bot system intended to be able to perform various tasks, ranging from easy server moderation (Kick, ban) to having fun (8ball, meme generation, music playback) in your Discord server. It has an extensive per-server customization system with various settings. For people interested in running a WildBeast instance themselves, there is even a sort of API for making your own commands.",
            "title": "What is WildBeast?"
        },
        {
            "location": "/#brief-history",
            "text": "WildBeast was originally written by 3 avid coders in 2015. Since then many devs have come and gone, years have rolled by and the bot has continuously matured. It's currently being constantly developed and improved by a multinational team of freelance and hobbyist developers.",
            "title": "Brief history"
        },
        {
            "location": "/#version-6",
            "text": "The new version of WildBeast, version 6 (Which this documentation targets) has received considerable overhauls - most noticeably under the hood. If you are running a WB version previous to v6,  do not attempt to update your existing instance.  Read the  migrating  page to find out more.",
            "title": "Version 6"
        },
        {
            "location": "/#main-features",
            "text": "These features are available in every WildBeast instance, including our official WildBot!   Music streaming from YouTube, SoundCloud and so forth.  Classy insults and strokes.  Dank meme generator.  Useful advice.  Moderation commands like kick, ban and so forth.  Role commands like addrole, takerole and colorrole.  NSFW image fetching via e621 and rule34.  Server utilities like welcome messages, server and user info and so forth.  High level of customization with an extensive per-server configuration engine.  Extensive support and documentation of running your own WildBeast.  Customisable tags, courtesy of  JagTag-JS  A command framework for you to create custom commands (If you're running a custom instance).   And much more; check out  the command reference  and  the custom command page  for starters!",
            "title": "Main features"
        },
        {
            "location": "/#selfhosting",
            "text": "There is extensive support available for those wishing to run WildBeast on their own hardware.  Installation guides   Windows installation  Linux installation   Other resources   Custom commands  ( Legacy version )",
            "title": "Selfhosting"
        },
        {
            "location": "/#discord-server",
            "text": "We run a Discord server in which you can test WildBeast's functionality in our own sandbox. Feel free to come over to chat, meet fellow coders and users alike or just hang out with the community! Click the banner below to get started.",
            "title": "Discord server"
        },
        {
            "location": "/migrating/",
            "text": "This document outlines the migration procedure from WildBeast version 4 and prior to WildBeast version 6.\n\n\nIntroduction\n\u00b6\n\n\nWildBeast version 6 has been in development for nearly a year at the time of writing and has now released. While on the user end very little has changed, the newest release has received a complete overhaul under the hood.\n\n\nMain changes\n\u00b6\n\n\n\n\nWildBeast now uses ArangoDB for data storage instead of RethinkDB.\n\n\nCommand indexing has been changed. Commands are stored in individual files, as opposed to categorical sorting.\n\n\nWildBeast has moved to Eris as Discord library, instead of using Discordie.\n\n\nConfiguration has been moved away from static files into environment variables using \ndotenv\n.\n\n\nThe installation procedure has received a major shift. Installation is now performed using Docker instead of manually installing dependencies.\n\n\nWildBeast now uses \nJagTag-JS\n for tag scripting, as opposed to \nTagScript\n.\n\n\nAudio is now encoded with \nLavalink\n instead of FFMPEG.\n\n\n\n\nNotice to selfhosters\n\u00b6\n\n\nIn practice, this means that:\n\n\n\n\nData stored by WildBeast <= v4 instances \nis not\n compatible with v6.\n\n\nCommands written for <= v4 instances \nare not\n compatible with v6.\n\n\nConfiguration for <= v4 instances \nis not\n compatible with v6.\n\n\nThe dependencies installed by <= v4 instances \nare largely extraneous\n.\n\n\n\n\nAs you can probably infer from this, v6 is a breaking change of the highest caliber. If you wish to retain any data you have in your current instance, \nDO NOT UPDATE.\n V4 will no longer receive support, but you may still continue running it if you wish to retain your data.\n\n\nIf you do not have data you care for in your instance, here is what improvements you can expect from v6 as opposed to v4.\n\n\n\n\nStreamlined installation procedure\n: Installaton via Docker makes the installation quick and virtually effortless.\n\n\nReduced disk footprint\n: Due to WB using proprietary JagTag-JS technology for tag scripting, Python 2.7 and C++ build tools are no longer required.\n\n\nBetter sound quality and music performance\n: Lavalink is now used for encoding, which results in better sound quality with a fraction of the memory footprint of FFMPEG.\n\n\n\n\nTL;DR\n\u00b6\n\n\nWildBeast v4 is in no way compatible with v6. If you wish to retain your data, do not update. Otherwise you may follow the installation procedure for Windows or Linux from the menu on the left.",
            "title": "Migrating v4 => v6"
        },
        {
            "location": "/migrating/#introduction",
            "text": "WildBeast version 6 has been in development for nearly a year at the time of writing and has now released. While on the user end very little has changed, the newest release has received a complete overhaul under the hood.",
            "title": "Introduction"
        },
        {
            "location": "/migrating/#main-changes",
            "text": "WildBeast now uses ArangoDB for data storage instead of RethinkDB.  Command indexing has been changed. Commands are stored in individual files, as opposed to categorical sorting.  WildBeast has moved to Eris as Discord library, instead of using Discordie.  Configuration has been moved away from static files into environment variables using  dotenv .  The installation procedure has received a major shift. Installation is now performed using Docker instead of manually installing dependencies.  WildBeast now uses  JagTag-JS  for tag scripting, as opposed to  TagScript .  Audio is now encoded with  Lavalink  instead of FFMPEG.",
            "title": "Main changes"
        },
        {
            "location": "/migrating/#notice-to-selfhosters",
            "text": "In practice, this means that:   Data stored by WildBeast <= v4 instances  is not  compatible with v6.  Commands written for <= v4 instances  are not  compatible with v6.  Configuration for <= v4 instances  is not  compatible with v6.  The dependencies installed by <= v4 instances  are largely extraneous .   As you can probably infer from this, v6 is a breaking change of the highest caliber. If you wish to retain any data you have in your current instance,  DO NOT UPDATE.  V4 will no longer receive support, but you may still continue running it if you wish to retain your data.  If you do not have data you care for in your instance, here is what improvements you can expect from v6 as opposed to v4.   Streamlined installation procedure : Installaton via Docker makes the installation quick and virtually effortless.  Reduced disk footprint : Due to WB using proprietary JagTag-JS technology for tag scripting, Python 2.7 and C++ build tools are no longer required.  Better sound quality and music performance : Lavalink is now used for encoding, which results in better sound quality with a fraction of the memory footprint of FFMPEG.",
            "title": "Notice to selfhosters"
        },
        {
            "location": "/migrating/#tldr",
            "text": "WildBeast v4 is in no way compatible with v6. If you wish to retain your data, do not update. Otherwise you may follow the installation procedure for Windows or Linux from the menu on the left.",
            "title": "TL;DR"
        },
        {
            "location": "/commands/",
            "text": "This is the command reference for WildBeast. You can find more elaborative information here on each of the commands currently implemented.\n\n\n\n\nTip\n\n\nSend the message \n++help <command>\n (Prefix may vary) to the bot to get further information on any given command.\n\n\n\n\nGotchas\n\u00b6\n\n\n\n\n\n\nSome commands on this page will have an empty \nUsage\n field. This means that the command takes no arguments and is accepted as such.\n\n\n\n\n\n\nParameters marked with \n<placeholders>\n are supposed to be replaced by other values. Do not incude the actual braces in the command. Similarly, \n@user\n placeholders refer to mentions. Parameters surrounded by \n[brackets]\n signify parameters that may be omitted.\n\n\n\n\n\n\nCommands in the \nNSFW\n category have been labeled as not safe for work and can only be used in a channel that has been marked as NSFW in the channel settings.\n\n\n\n\n\n\nAdditional command information:\n\n\nAddendums\n\n\nTag subcommands\n\n\nSettings subcommands\n\n\nAvailable meme types\n\n\nCommands\n\u00b6\n\n\n\n\n\nAddendums\n\u00b6\n\n\n\n\nFor the \ncolorrole\n command, a hexadecimal value can be submitted in either \n#FFFFFF\n or \nFFFFFF\n format.\n\n\nThe \nsoftban\n command bans a user and then immediately unbans them, deleting their messages without barring future access to the server.\n\n\nThe \nrequest\n command supports playing from the following resources: YouTube, SoundCloud, Bandcamp, Twitch, Vimeo, Mixer and raw HTML audio.\n\n\n\n\nTag subcommands\n\u00b6\n\n\nThe tag command has the following subcommands. All subcommands inherit the permission level of the main command.\n\n\n\n\nTip\n\n\nYou can use JagTag formatting with the \ntag create\n command. See \nthe JagTag-JS documentation\n for more information on how.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\ntag create\n\n\nCreate a tag.\n\n\ntag create \n<name>\n \n<content>\n\n\n\n\n\n\ntag delete\n\n\nDelete a tag.\n\n\ntag delete \n<name>\n\n\n\n\n\n\ntag edit\n\n\nEdit an existing tag.\n\n\ntag edit \n<name>\n \n<newcontent>\n\n\n\n\n\n\ntag owner\n\n\nReturn the owner of a tag.\n\n\ntag owner \n<name>\n\n\n\n\n\n\ntag random\n\n\nRetrieve a random tag from the database.\n\n\ntag random\n\n\n\n\n\n\ntag raw\n\n\nReturn the raw data of a tag.\n\n\ntag raw \n<name>\n\n\n\n\n\n\n\n\nSettings subcommands\n\u00b6\n\n\nThe following settings can be edited with this command. All settings are server-specific and all subcommands inherit the permission level of the main command.\n\n\n\n\nNote\n\n\nLanguages are still WIP. Only the \"en\" language is supported at the moment.\n\n\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\nUsage\n\n\n\n\n\n\n\n\n\n\nprefix\n\n\nChange the command prefix.\n\n\nsettings prefix \n<newprefix>\n\n\n\n\n\n\nlanguage\n\n\nChange the language the bot will respond in.\n\n\nsettings language \n<language>\n\n\n\n\n\n\nwelcome\n\n\nChange the welcome message target.\n\n\nsettings welcome \n<#channel/dm>\n\n\n\n\n\n\nwelcomeMessage\n\n\nChange the welcome message that is sent when a new member joins.\n\n\nsettings welcomeMessage \n<message>\n\n\n\n\n\n\nreset\n\n\nReset a setting to its default value.\n\n\nsettings reset \n<setting>\n\n\n\n\n\n\n\n\nAvailable meme types\n\u00b6\n\n\nThe values in the \nName\n column of the table below correspond to the relevant meme ID on \nhttps://api.imgflip.com/popular_meme_ids\n.\n\n\n\n\n\n\n\n\nName\n\n\nID\n\n\n\n\n\n\n\n\n\n\nbrace\n\n\n61546\n\n\n\n\n\n\nmostinteresting\n\n\n61532\n\n\n\n\n\n\nfry\n\n\n61520\n\n\n\n\n\n\nonedoesnot\n\n\n61579\n\n\n\n\n\n\nyuno\n\n\n61527\n\n\n\n\n\n\nsuccess\n\n\n61544\n\n\n\n\n\n\nallthethings\n\n\n61533\n\n\n\n\n\n\ndoge\n\n\n8072285\n\n\n\n\n\n\ndrevil\n\n\n40945639\n\n\n\n\n\n\nskeptical\n\n\n101711\n\n\n\n\n\n\nnotime\n\n\n442575\n\n\n\n\n\n\nyodawg\n\n\n101716\n\n\n\n\n\n\nermahgerd\n\n\n101462\n\n\n\n\n\n\nhipsterariel\n\n\n86601\n\n\n\n\n\n\nimagination\n\n\n163573\n\n\n\n\n\n\ngrumpycat\n\n\n405658\n\n\n\n\n\n\nmorpheus\n\n\n100947\n\n\n\n\n\n\n1stworldproblems\n\n\n61539\n\n\n\n\n\n\nfacepalm\n\n\n1509839\n\n\n\n\n\n\nwtf\n\n\n245898\n\n\n\n\n\n\nbatmanslaprobin\n\n\n438680\n\n\n\n\n\n\ntakemymoney\n\n\n176908\n\n\n\n\n\n\ngollum\n\n\n681831\n\n\n\n\n\n\ngrindmygears\n\n\n356615\n\n\n\n\n\n\nconsuela\n\n\n160583\n\n\n\n\n\n\nineedyouto\n\n\n89655\n\n\n\n\n\n\nchucknorrisapproves\n\n\n241304\n\n\n\n\n\n\nasianfather\n\n\n61559\n\n\n\n\n\n\nforeveralone\n\n\n61528\n\n\n\n\n\n\ngrandmainternet\n\n\n61556\n\n\n\n\n\n\nzoidberg\n\n\n61573\n\n\n\n\n\n\ntroll\n\n\n101484\n\n\n\n\n\n\nfamilyguybrian\n\n\n674967\n\n\n\n\n\n\nobama\n\n\n185239\n\n\n\n\n\n\nbadluckbrian\n\n\n61585\n\n\n\n\n\n\nphilosoraptor\n\n\n61516\n\n\n\n\n\n\n3rdworldsuccess\n\n\n101287\n\n\n\n\n\n\nancientaliens\n\n\n101470",
            "title": "Command reference"
        },
        {
            "location": "/commands/#gotchas",
            "text": "Some commands on this page will have an empty  Usage  field. This means that the command takes no arguments and is accepted as such.    Parameters marked with  <placeholders>  are supposed to be replaced by other values. Do not incude the actual braces in the command. Similarly,  @user  placeholders refer to mentions. Parameters surrounded by  [brackets]  signify parameters that may be omitted.    Commands in the  NSFW  category have been labeled as not safe for work and can only be used in a channel that has been marked as NSFW in the channel settings.    Additional command information:  Addendums  Tag subcommands  Settings subcommands  Available meme types",
            "title": "Gotchas"
        },
        {
            "location": "/commands/#commands",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/commands/#addendums",
            "text": "For the  colorrole  command, a hexadecimal value can be submitted in either  #FFFFFF  or  FFFFFF  format.  The  softban  command bans a user and then immediately unbans them, deleting their messages without barring future access to the server.  The  request  command supports playing from the following resources: YouTube, SoundCloud, Bandcamp, Twitch, Vimeo, Mixer and raw HTML audio.",
            "title": "Addendums"
        },
        {
            "location": "/commands/#tag-subcommands",
            "text": "The tag command has the following subcommands. All subcommands inherit the permission level of the main command.   Tip  You can use JagTag formatting with the  tag create  command. See  the JagTag-JS documentation  for more information on how.      Name  Description  Usage      tag create  Create a tag.  tag create  <name>   <content>    tag delete  Delete a tag.  tag delete  <name>    tag edit  Edit an existing tag.  tag edit  <name>   <newcontent>    tag owner  Return the owner of a tag.  tag owner  <name>    tag random  Retrieve a random tag from the database.  tag random    tag raw  Return the raw data of a tag.  tag raw  <name>",
            "title": "Tag subcommands"
        },
        {
            "location": "/commands/#settings-subcommands",
            "text": "The following settings can be edited with this command. All settings are server-specific and all subcommands inherit the permission level of the main command.   Note  Languages are still WIP. Only the \"en\" language is supported at the moment.      Name  Description  Usage      prefix  Change the command prefix.  settings prefix  <newprefix>    language  Change the language the bot will respond in.  settings language  <language>    welcome  Change the welcome message target.  settings welcome  <#channel/dm>    welcomeMessage  Change the welcome message that is sent when a new member joins.  settings welcomeMessage  <message>    reset  Reset a setting to its default value.  settings reset  <setting>",
            "title": "Settings subcommands"
        },
        {
            "location": "/commands/#available-meme-types",
            "text": "The values in the  Name  column of the table below correspond to the relevant meme ID on  https://api.imgflip.com/popular_meme_ids .     Name  ID      brace  61546    mostinteresting  61532    fry  61520    onedoesnot  61579    yuno  61527    success  61544    allthethings  61533    doge  8072285    drevil  40945639    skeptical  101711    notime  442575    yodawg  101716    ermahgerd  101462    hipsterariel  86601    imagination  163573    grumpycat  405658    morpheus  100947    1stworldproblems  61539    facepalm  1509839    wtf  245898    batmanslaprobin  438680    takemymoney  176908    gollum  681831    grindmygears  356615    consuela  160583    ineedyouto  89655    chucknorrisapproves  241304    asianfather  61559    foreveralone  61528    grandmainternet  61556    zoidberg  61573    troll  101484    familyguybrian  674967    obama  185239    badluckbrian  61585    philosoraptor  61516    3rdworldsuccess  101287    ancientaliens  101470",
            "title": "Available meme types"
        },
        {
            "location": "/custom_commands/",
            "text": "This document outlines the procedure for writing custom commands for WildBeast.\n\n\n\n\nMigrating from versions preceding v6\n\n\nIn WildBeast versions 3 and 4, commands were declared in a very different way - namely, the commands were indexed into files based on category (Whereas version 6 indexes commands individually). The syntax was also vastly different. If you wish to write commands for pre-v6 versions, the \nLegacy custom commands\n page details the old approach.\n\n\n\n\n\n\nCustom command support\n\n\nSome basic JavaScript knowledge is required to write custom commands. Support for doing this will not be provided in addition to what is listed on this page, if the issue does not specifically concern WildBeast.\n\n\n\n\nGeneral notes\n\u00b6\n\n\n\n\nCommand files are placed into \n~/src/commands\n.\n\n\nEach command is declared in a separate file, preferably with the command name. (I.e if your command is named \ndankmeme\n, name the file \ndankmeme.js\n.)\n\n\nCommands cannot share names - each must have a name of its own.\n\n\n\n\nProperty declaration\n\u00b6\n\n\nThe exported command data describes the command in various ways. Here are the properties that can be defined.\n\n\nA command object consists of a \nmeta\n object and an \nfn\n function. The function gets executed when the command gets ran, while the meta object provides information and modifiers to the command. Both the meta and fn properties must be defined on a command object.\n\n\nMeta object structure\n\u00b6\n\n\nNote:\n An empty \nValue\n column implies that there are no specific formatting requirements for the particular property.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nValue\n\n\nType\n\n\nRequired\n\n\n\n\n\n\n\n\n\n\nhelp\n\n\nA brief description of what the command does.\n\n\n\n\nString\n\n\nYes\n\n\n\n\n\n\nusage\n\n\nAn example of how to use the command.\n\n\n\n\nString\n\n\nNo\n\n\n\n\n\n\nmodule\n\n\nA category to which the command belongs.\n\n\n\n\nString\n\n\nNo\n\n\n\n\n\n\nlevel\n\n\nThe permission level required to run the command.\n\n\n0-10/Infinity\n\n\nNumber\n\n\nYes\n\n\n\n\n\n\ntimeout\n\n\nA time in milliseconds for which the command will be on cooldown between uses.\n\n\n\n\nNumber\n\n\nNo\n\n\n\n\n\n\nnoDM\n\n\nWhether the command can be used in direct message context or not.\n\n\n\n\nBoolean\n\n\nNo\n\n\n\n\n\n\nnsfw\n\n\nWhether the command is NSFW or not. If set, restricts the command usage scope to NSFW channels only.\n\n\n\n\nBoolean\n\n\nNo\n\n\n\n\n\n\nalias\n\n\nA list of aliases\n1\n (Alternative command names) to run the command.\n\n\n\n\nArray\n\n\nNo\n\n\n\n\n\n\naddons\n\n\nAddendums to the command's help message.\n\n\n\n\nString\n\n\nNo\n\n\n\n\n\n\npermAddons\n\n\nAdditional Discord permissions that are required to run the command.\n\n\nDiscord permission name (Manage Roles etc.)\n\n\nArray\n\n\nNo\n\n\n\n\n\n\n\n\n\n\nTesting your commands\n\n\nTo verify that your commands pass the above requirements, you can run \nnpm test\n. \n\n\n\n\nExample\n\u00b6\n\n\nmodule\n.\nexports\n \n=\n \n{\n\n  \nmeta\n:\n \n{\n\n    \nhelp\n:\n \n'I\\'ll say hello to you!'\n,\n\n    \nusage\n:\n \n'<name>'\n,\n\n    \nmodule\n:\n \n'Fun'\n,\n\n    \nlevel\n:\n \n0\n,\n\n    \ntimeout\n:\n \n0\n,\n\n    \nnoDM\n:\n \nfalse\n,\n\n    \nnsfw\n:\n \nfalse\n,\n\n    \nalias\n:\n \n[\n'hi'\n,\n \n'hey'\n],\n\n    \naddons\n:\n \n[\n'This command can also be used in Direct Messages.'\n],\n\n    \npermAddons\n:\n \n[\n'Manage Messages'\n]\n\n  \n},\n\n  \nfn\n:\n \nfunction\n \n(\nmsg\n,\n \nsuffix\n)\n \n{\n\n    \nif\n \n(\nsuffix\n)\n \nmsg\n.\nchannel\n.\ncreateMessage\n(\n`Hello \n${\nsuffix\n}\n!`\n)\n\n    \nelse\n \nmsg\n.\nchannel\n.\ncreateMessage\n(\n'Hello!'\n)\n\n  \n}\n\n\n}\n\n\n\n\n\n\nAnd that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!\n\n\n\n\n\n\n\n\n\n\nAliases must not overwrite existing command names or aliases.\u00a0\n\u21a9",
            "title": "Custom commands"
        },
        {
            "location": "/custom_commands/#general-notes",
            "text": "Command files are placed into  ~/src/commands .  Each command is declared in a separate file, preferably with the command name. (I.e if your command is named  dankmeme , name the file  dankmeme.js .)  Commands cannot share names - each must have a name of its own.",
            "title": "General notes"
        },
        {
            "location": "/custom_commands/#property-declaration",
            "text": "The exported command data describes the command in various ways. Here are the properties that can be defined.  A command object consists of a  meta  object and an  fn  function. The function gets executed when the command gets ran, while the meta object provides information and modifiers to the command. Both the meta and fn properties must be defined on a command object.",
            "title": "Property declaration"
        },
        {
            "location": "/custom_commands/#meta-object-structure",
            "text": "Note:  An empty  Value  column implies that there are no specific formatting requirements for the particular property.     Property  Description  Value  Type  Required      help  A brief description of what the command does.   String  Yes    usage  An example of how to use the command.   String  No    module  A category to which the command belongs.   String  No    level  The permission level required to run the command.  0-10/Infinity  Number  Yes    timeout  A time in milliseconds for which the command will be on cooldown between uses.   Number  No    noDM  Whether the command can be used in direct message context or not.   Boolean  No    nsfw  Whether the command is NSFW or not. If set, restricts the command usage scope to NSFW channels only.   Boolean  No    alias  A list of aliases 1  (Alternative command names) to run the command.   Array  No    addons  Addendums to the command's help message.   String  No    permAddons  Additional Discord permissions that are required to run the command.  Discord permission name (Manage Roles etc.)  Array  No      Testing your commands  To verify that your commands pass the above requirements, you can run  npm test .",
            "title": "Meta object structure"
        },
        {
            "location": "/custom_commands/#example",
            "text": "module . exports   =   { \n   meta :   { \n     help :   'I\\'ll say hello to you!' , \n     usage :   '<name>' , \n     module :   'Fun' , \n     level :   0 , \n     timeout :   0 , \n     noDM :   false , \n     nsfw :   false , \n     alias :   [ 'hi' ,   'hey' ], \n     addons :   [ 'This command can also be used in Direct Messages.' ], \n     permAddons :   [ 'Manage Messages' ] \n   }, \n   fn :   function   ( msg ,   suffix )   { \n     if   ( suffix )   msg . channel . createMessage ( `Hello  ${ suffix } !` ) \n     else   msg . channel . createMessage ( 'Hello!' ) \n   }  }   And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!      Aliases must not overwrite existing command names or aliases.\u00a0 \u21a9",
            "title": "Example"
        },
        {
            "location": "/legacy_custom_commands/",
            "text": "This document outlines the procedure for writing custom commands for WildBeast versions previous to version 6.\n\n\n\n\nLegacy content ahead\n\n\nThis guide is no longer being updated after the release of WildBeast v6. It is highly recommended to migrate to v6 if possible as v4 is no longer supported.\n\n\n\n\n\n\nCustom command support\n\n\nSome basic JavaScript knowledge is required to write custom commands. Support for doing this will not be provided in addition to what is listed on this page, if the issue does not specifically concern WildBeast.\n\n\n\n\nIntro\n\u00b6\n\n\nStarting at version 3.0.0, WildBeast allows for the addition of user created JavaScript files with commands, given that they are written in the exact same format as default files. This page provides you with the tools you need to create your own commands.\n\n\nImportant notes\n\u00b6\n\n\n\n\nFiles need to declare commands to an array, and the array needs to be exported as \nCommands\n.\n\n\nIn practice: \nvar\n \nCommands\n \n=\n \n[]\n and \nexports\n.\nCommands\n \n=\n \nCommands\n\n\n\n\n\n\nYour command files must be in the \ncustom\n folder within the \ncommands\n folder. The path would therefore be \n~/WildBeast/runtime/commands/custom\n.\n\n\nCommands are \nobjects\n added to an \narray\n.\n\n\nAliases can't be shared between commands. This means that a custom command can't have the same alias as a default command. The bot will stop itself from running and spit out an error if this happens, for safety reasons.\n\n\nAny functions that use for instance config fields and so forth need to be imported in the format \n../../file.ext\n or \n../file.ext\n depending on what folder the file is in.\n\n\n\n\nProperty declaration\n\u00b6\n\n\nCommand objects consist of different properties which define how the command runs. There are mandatory properties and optional properties, divided into their own lists. The command callback name is decided by the \n<cmdname>\n placeholder in \nCommands.<cmdname>\n.\n\n\nProperty scheme\n\u00b6\n\n\nMandatory properties\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nCommand name for the help module, \nnot\n callback name! See above.\n\n\n\n\n\n\nhelp\n\n\nString\n\n\nMessage displayed when \nhelp <command>\n is called on the command.\n\n\n\n\n\n\nlevel\n\n\nString\n / \nNumber\n\n\nMinimum user access level (0-3 int) required to execute this command. Set to \n'master'\n to restrict usage to config-defined master users.\n\n\n\n\n\n\nfn\n\n\nFunction\n\n\nDefines the JavaScript function to execute when the command is called.\n\n\n\n\n\n\n\n\nOptional properties\n\n\n\n\n\n\n\n\nProperty\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnoDM\n\n\nBoolean\n\n\nWhether to allow usage in direct messages. Default true.\n\n\n\n\n\n\ntimeout\n\n\nNumber\n\n\nUnsigned integer that defines how long a command will be on timeout before it's usable again. The number represents seconds.\n\n\n\n\n\n\nusage\n\n\nString\n\n\nThe example of how the command is used when \nhelp <command>\n is called on the command.\n\n\n\n\n\n\noverwrite\n\n\nBoolean\n\n\nWhether to accept this command instead of the default one, in case the callback name is the same. Default false.\n\n\n\n\n\n\naliases\n\n\nArray\n<\nString\n>\n\n\nHardcoded aliases to call this command with in addition to the default callback name.\n\n\n\n\n\n\nhidden\n\n\nBoolean\n\n\nWhether to hide the command from the command list returned with \nhelp\n. Default false.\n\n\n\n\n\n\n\n\nExample structure\n\u00b6\n\n\nSimple command example:\n\n\nconst\n \nCommands\n \n=\n \n[]\n \n// Declaration of the command array\n\n\n\nCommands\n.\nping\n \n=\n \n{\n\n  \nname\n:\n \n'ping'\n,\n\n  \nhelp\n:\n \n'Check if I still live.'\n\n  \ntimeout\n:\n \n10\n,\n\n  \noverwrite\n:\n \ntrue\n,\n \n// WildBeast already has a command called ping, will overwrite with this\n\n  \naliases\n:\n \n[\n'pong'\n],\n\n  \nlevel\n:\n \n0\n,\n\n  \nfn\n:\n \nfunction\n(\nmsg\n)\n \n{\n\n    \nmsg\n.\nchannel\n.\nsendMessage\n(\n'I LIVE'\n)\n\n  \n}\n\n\n}\n\n\n\nexports\n.\nCommands\n \n=\n \nCommands\n \n// Expose the commands to the commandcontrol module\n\n\n\n\n\n\nExample of command that uses an external module:\n\n\nconst\n \nCommands\n \n=\n \n[]\n \n// Declaration of the command array\n\n\nconst\n \nconfig\n \n=\n \nrequire\n(\n'../../../config.json'\n)\n \n// Import config\n\n\n\nCommands\n.\nprefix\n \n=\n \n{\n\n  \nname\n:\n \n'prefix'\n,\n\n  \nhelp\n:\n \n'Ask the bot what the configured prefix is.'\n\n  \ntimeout\n:\n \n30\n,\n\n  \noverwrite\n:\n \ntrue\n,\n\n \u00a0\nlevel\n:\n \n'master'\n,\n\n  \nfn\n:\n \nfunction\n(\nmsg\n)\n \n{\n\n    \nmsg\n.\nchannel\n.\nsendMessage\n(\n'My prefix is '\n \n+\n \nconfig\n.\nprefix\n)\n\n  \n}\n\n\n}\n\n\n\nexports\n.\nCommands\n \n=\n \nCommands\n \n// Expose the commands to the commandcontrol module\n\n\n\n\n\n\nAnd that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!",
            "title": "Legacy custom commands"
        },
        {
            "location": "/legacy_custom_commands/#intro",
            "text": "Starting at version 3.0.0, WildBeast allows for the addition of user created JavaScript files with commands, given that they are written in the exact same format as default files. This page provides you with the tools you need to create your own commands.",
            "title": "Intro"
        },
        {
            "location": "/legacy_custom_commands/#important-notes",
            "text": "Files need to declare commands to an array, and the array needs to be exported as  Commands .  In practice:  var   Commands   =   []  and  exports . Commands   =   Commands    Your command files must be in the  custom  folder within the  commands  folder. The path would therefore be  ~/WildBeast/runtime/commands/custom .  Commands are  objects  added to an  array .  Aliases can't be shared between commands. This means that a custom command can't have the same alias as a default command. The bot will stop itself from running and spit out an error if this happens, for safety reasons.  Any functions that use for instance config fields and so forth need to be imported in the format  ../../file.ext  or  ../file.ext  depending on what folder the file is in.",
            "title": "Important notes"
        },
        {
            "location": "/legacy_custom_commands/#property-declaration",
            "text": "Command objects consist of different properties which define how the command runs. There are mandatory properties and optional properties, divided into their own lists. The command callback name is decided by the  <cmdname>  placeholder in  Commands.<cmdname> .",
            "title": "Property declaration"
        },
        {
            "location": "/legacy_custom_commands/#property-scheme",
            "text": "Mandatory properties     Property  Type  Description      name  String  Command name for the help module,  not  callback name! See above.    help  String  Message displayed when  help <command>  is called on the command.    level  String  /  Number  Minimum user access level (0-3 int) required to execute this command. Set to  'master'  to restrict usage to config-defined master users.    fn  Function  Defines the JavaScript function to execute when the command is called.     Optional properties     Property  Type  Description      noDM  Boolean  Whether to allow usage in direct messages. Default true.    timeout  Number  Unsigned integer that defines how long a command will be on timeout before it's usable again. The number represents seconds.    usage  String  The example of how the command is used when  help <command>  is called on the command.    overwrite  Boolean  Whether to accept this command instead of the default one, in case the callback name is the same. Default false.    aliases  Array < String >  Hardcoded aliases to call this command with in addition to the default callback name.    hidden  Boolean  Whether to hide the command from the command list returned with  help . Default false.",
            "title": "Property scheme"
        },
        {
            "location": "/legacy_custom_commands/#example-structure",
            "text": "Simple command example:  const   Commands   =   []   // Declaration of the command array  Commands . ping   =   { \n   name :   'ping' , \n   help :   'Check if I still live.' \n   timeout :   10 , \n   overwrite :   true ,   // WildBeast already has a command called ping, will overwrite with this \n   aliases :   [ 'pong' ], \n   level :   0 , \n   fn :   function ( msg )   { \n     msg . channel . sendMessage ( 'I LIVE' ) \n   }  }  exports . Commands   =   Commands   // Expose the commands to the commandcontrol module   Example of command that uses an external module:  const   Commands   =   []   // Declaration of the command array  const   config   =   require ( '../../../config.json' )   // Import config  Commands . prefix   =   { \n   name :   'prefix' , \n   help :   'Ask the bot what the configured prefix is.' \n   timeout :   30 , \n   overwrite :   true , \n \u00a0 level :   'master' , \n   fn :   function ( msg )   { \n     msg . channel . sendMessage ( 'My prefix is '   +   config . prefix ) \n   }  }  exports . Commands   =   Commands   // Expose the commands to the commandcontrol module   And that's how easy it is to create your own commands for WildBeast. Good luck in making your commands, and tinker to your heart's desire!",
            "title": "Example structure"
        },
        {
            "location": "/install_windows/",
            "text": "This guide will detail how to install and setup WildBeast on Windows.\n\n\nPrerequisites\n\u00b6\n\n\n\n\nWindows system\n\n\nMinimum: Windows 10 Home 64-bit (Additional dependencies required)\n\n\nRecommended: Windows 10 Professional or Enterprise 64-bit\n\n\nAdministrator access\n\n\n\n\n\n\nYou will also need a text editor other than Windows Notepad. Notepad++, Visual Studio Code or any of the sort will suffice.\n\n\n\n\nInstallation\n\u00b6\n\n\n\n\nNote about Windows 10 Home\n\n\nWindows 10 Home lacks native virtualisation support, namely Hyper-V, which is used by Docker. Before you read on, find out your edition of Windows from either the Settings app (\nSettings\\System\\About\n) or the Control Panel (\nControl Panel\\System and Security\\System\n).\n\n\n\n\nInstalling Docker\n\u00b6\n\n\nYou will need to install Docker Community Edition and Kitematic to use WildBeast. Depending on your operating system, the procedure will slightly differ.\n\n\n\n\nIf you are using W10 Professional or Enterprise, follow the instructions to install \nDocker on Windows\n and \nKitematic\n.\n\n\nIf you are using W10 Home, follow the instructions to install \nDocker Toolbox\n.\n\n\n\n\nComplete the appropriate installation procedure and verify Docker is functional before proceeding.\n\n\nInstalling Git\n\u00b6\n\n\nIt is highly recommended to use Git to retrieve WildBeast instead of downloading a ZIP package from GitHub for ease of updating later down the line.\n\n\nDownload \nGit\n and install it with the following options:\n\n\n\n\nFeatures: Desktop icon, Explorer integration and TrueType console font can be omitted at will\n\n\nText editor: Your personal preference\n\n\nUse Git from the Windows Command Prompt (\nImportant!\n)\n\n\nUse OpenSSH and OpenSSL (\nImportant!\n)\n\n\nCheckout as-is, commit Unix-style line endings\n\n\nUse MinTTY (If you're installing Git Bash)\n\n\nAdditional options: Your personal preference\n\n\n\n\nSetup\n\u00b6\n\n\nWith that done, clone the WildBeast GitHub repository by running \ngit clone https://github.com/TheSharks/WildBeast.git\n in a terminal window. After cloning, change to the \nWildBeast\n directory and open \n.env.example\n with your preferred text editor.\n\n\nEdit the following parameters:\n\n\n\n\nBOT_TOKEN\n: Add your Discord bot token here. (Eg. \ncreate a bot and add it to a server\n)\n\n\nBOT_PREFIX\n: Add your preferred command prefix here. (Eg. \n!\n, \n++\n, etc.)\n\n\nWILDBEAST_MASTERS\n: Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg. \n152664793587777537|10790402390177792\n and so on)\n\n\n\n\nIf you're running a custom ArangoDB instance and wish to use it, you can also edit \nARANGO_USERNAME\n, \nARANGO_PASSWORD\n, \nARANGO_DATABASE\n and \nARANGO_URI\n now. The same goes for the \nLAVA_NODES\n variable in case you're running a custom Lavalink instance.\n\n\nWhen done, save the file as \n.env\n. Then run \ndocker-compose up --no-start\n in the WildBeast directory. When the container creation is done, open Kitematic and you should have the following containers present.\n\n\n\n\nWarning\n\n\nIt is paramount you save the file as \n.env\n. Do not leave it as \n.env.example\n, name it \n.env.txt\n or anything similar. Docker will not recognise it in this case.\n\n\n\n\n\n\nKnown docker-compose issues\n\n\nDocker Toolbox does not start automatically with Windows out of the box - it needs to be started explicitly. Thus, if you do not perform this step, you may run into cryptic errors when attempting to compose. These errors are known to arise:\n\n\nCould not connect to Docker daemon\n\n\nWindows named pipe error: The system cannot find the file specified\n\n\nDocker Toolbox should create a desktop icon called \nDocker Quickstart Terminal\n upon installation. Start it, wait for it to completely start (Until it shows \nStart interactive shell\n), restart your terminal and run the compose command again.\n\n\n\n\n\n\nInitialising\n\u00b6\n\n\nTo initialise WildBeast, start the following containers in the following order. Wait for one to finish before proceeding.\n\n\n\n\nNote\n\n\nIf you configured a custom ArangoDB instance previously, omit the first step.\n\n\n\n\n\n\nwildbeast_arango_1\n\n\nwildbeast_install_1\n\n\n\n\nYou may have to click back and forth between containers to see the output from one.\n\n\nWhen \nwildbeast_install_1\n finishes, you may stop it. After this you do not need to run \nwildbeast_install_1\n again, as this only initialises the database. You can run it again if you wish to repair your database, however.\n\n\nConfiguration\n\u00b6\n\n\nOpen the settings for the \nwildbeast_wildbeast_1\n container and check the Environment Variables tab. The minimum defaults were defined previously, but the bot will only have fairly limited functionality if left at this state.\n\n\nHere is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nCommands using this\n\n\nType\n\n\n\n\n\n\n\n\n\n\nIMGFLIP_USERNAME\n\n\nImgflip username.\n1\n\n\nmeme\n\n\nString\n\n\n\n\n\n\nIMGFLIP_PASSWORD\n\n\nImgflip password.\n1\n\n\nmeme\n\n\nString\n\n\n\n\n\n\nIMGUR_KEY\n\n\nImgur API key.\n2\n\n\nrandommeme\n\n\nString\n\n\n\n\n\n\nTWITCH_ID\n\n\nTwitch client ID.\n3\n\n\ntwitch\n\n\nString\n\n\n\n\n\n\nWILDBEAST_VOICE_PERSIST\n\n\nPrevent the bot from automatically leaving a voice channel after a playlist has ended.\n\n\nMusic\n\n\nNumber (0/1)\n4\n\n\n\n\n\n\nWILDBEAT_DISABLE_MUSIC\n\n\nPrevent all music functionality from being used.\n\n\nMusic\n\n\nNumber (0/1)\n4\n\n\n\n\n\n\nWILDBEAST_LANGUAGE\n\n\nSet the language of the bot. Currently only English is available.\n\n\nAll\n\n\nString\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nThere are more environment variables that can be defined as well. You can find the full reference in \n.env.example\n.\n\n\nHowever, we do not recommend editing variables in the \nInternal configuration\n section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with.\n\n\n\n\nRunning the bot\n\u00b6\n\n\n\n\nNote\n\n\nIf you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers.\n\n\n\n\nYour WildBeast instance should now be good to go. Start both the \nwildbeast_arango_1\n and \nwildbeast_lavalink_1\n containers, and when they're ready, start \nwildbeast_wildbeast_1\n. Wait for it to start, and if your output roughly resembles the following, you're set.\n\n\n\n\nYou can test the bot by running the \nping\n command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up.\n\n\nIf you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below.\n\n\nEnjoy your bot and have fun!\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nGo to \nhttps://imgflip.com\n, create an account and input your username and password here.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nGo to \nhttps://www.twitch.tv/settings/connections\n, register an application and input the client ID you get from that here.\u00a0\n\u21a9\n\n\n\n\n\n\nGo to \nhttps://api.imgur.com/oauth2/addclient\n, register an application and input the client ID (Not secret!) you get from that here.\u00a0\n\u21a9\n\n\n\n\n\n\nSet to 1 to enable this behaviour, or to 0 to disable it.\u00a0\n\u21a9\n\u21a9",
            "title": "Windows installation"
        },
        {
            "location": "/install_windows/#prerequisites",
            "text": "Windows system  Minimum: Windows 10 Home 64-bit (Additional dependencies required)  Recommended: Windows 10 Professional or Enterprise 64-bit  Administrator access    You will also need a text editor other than Windows Notepad. Notepad++, Visual Studio Code or any of the sort will suffice.",
            "title": "Prerequisites"
        },
        {
            "location": "/install_windows/#installation",
            "text": "Note about Windows 10 Home  Windows 10 Home lacks native virtualisation support, namely Hyper-V, which is used by Docker. Before you read on, find out your edition of Windows from either the Settings app ( Settings\\System\\About ) or the Control Panel ( Control Panel\\System and Security\\System ).",
            "title": "Installation"
        },
        {
            "location": "/install_windows/#installing-docker",
            "text": "You will need to install Docker Community Edition and Kitematic to use WildBeast. Depending on your operating system, the procedure will slightly differ.   If you are using W10 Professional or Enterprise, follow the instructions to install  Docker on Windows  and  Kitematic .  If you are using W10 Home, follow the instructions to install  Docker Toolbox .   Complete the appropriate installation procedure and verify Docker is functional before proceeding.",
            "title": "Installing Docker"
        },
        {
            "location": "/install_windows/#installing-git",
            "text": "It is highly recommended to use Git to retrieve WildBeast instead of downloading a ZIP package from GitHub for ease of updating later down the line.  Download  Git  and install it with the following options:   Features: Desktop icon, Explorer integration and TrueType console font can be omitted at will  Text editor: Your personal preference  Use Git from the Windows Command Prompt ( Important! )  Use OpenSSH and OpenSSL ( Important! )  Checkout as-is, commit Unix-style line endings  Use MinTTY (If you're installing Git Bash)  Additional options: Your personal preference",
            "title": "Installing Git"
        },
        {
            "location": "/install_windows/#setup",
            "text": "With that done, clone the WildBeast GitHub repository by running  git clone https://github.com/TheSharks/WildBeast.git  in a terminal window. After cloning, change to the  WildBeast  directory and open  .env.example  with your preferred text editor.  Edit the following parameters:   BOT_TOKEN : Add your Discord bot token here. (Eg.  create a bot and add it to a server )  BOT_PREFIX : Add your preferred command prefix here. (Eg.  ! ,  ++ , etc.)  WILDBEAST_MASTERS : Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg.  152664793587777537|10790402390177792  and so on)   If you're running a custom ArangoDB instance and wish to use it, you can also edit  ARANGO_USERNAME ,  ARANGO_PASSWORD ,  ARANGO_DATABASE  and  ARANGO_URI  now. The same goes for the  LAVA_NODES  variable in case you're running a custom Lavalink instance.  When done, save the file as  .env . Then run  docker-compose up --no-start  in the WildBeast directory. When the container creation is done, open Kitematic and you should have the following containers present.   Warning  It is paramount you save the file as  .env . Do not leave it as  .env.example , name it  .env.txt  or anything similar. Docker will not recognise it in this case.    Known docker-compose issues  Docker Toolbox does not start automatically with Windows out of the box - it needs to be started explicitly. Thus, if you do not perform this step, you may run into cryptic errors when attempting to compose. These errors are known to arise:  Could not connect to Docker daemon  Windows named pipe error: The system cannot find the file specified  Docker Toolbox should create a desktop icon called  Docker Quickstart Terminal  upon installation. Start it, wait for it to completely start (Until it shows  Start interactive shell ), restart your terminal and run the compose command again.",
            "title": "Setup"
        },
        {
            "location": "/install_windows/#initialising",
            "text": "To initialise WildBeast, start the following containers in the following order. Wait for one to finish before proceeding.   Note  If you configured a custom ArangoDB instance previously, omit the first step.    wildbeast_arango_1  wildbeast_install_1   You may have to click back and forth between containers to see the output from one.  When  wildbeast_install_1  finishes, you may stop it. After this you do not need to run  wildbeast_install_1  again, as this only initialises the database. You can run it again if you wish to repair your database, however.",
            "title": "Initialising"
        },
        {
            "location": "/install_windows/#configuration",
            "text": "Open the settings for the  wildbeast_wildbeast_1  container and check the Environment Variables tab. The minimum defaults were defined previously, but the bot will only have fairly limited functionality if left at this state.  Here is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below.     Variable  Description  Commands using this  Type      IMGFLIP_USERNAME  Imgflip username. 1  meme  String    IMGFLIP_PASSWORD  Imgflip password. 1  meme  String    IMGUR_KEY  Imgur API key. 2  randommeme  String    TWITCH_ID  Twitch client ID. 3  twitch  String    WILDBEAST_VOICE_PERSIST  Prevent the bot from automatically leaving a voice channel after a playlist has ended.  Music  Number (0/1) 4    WILDBEAT_DISABLE_MUSIC  Prevent all music functionality from being used.  Music  Number (0/1) 4    WILDBEAST_LANGUAGE  Set the language of the bot. Currently only English is available.  All  String      Tip  There are more environment variables that can be defined as well. You can find the full reference in  .env.example .  However, we do not recommend editing variables in the  Internal configuration  section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with.",
            "title": "Configuration"
        },
        {
            "location": "/install_windows/#running-the-bot",
            "text": "Note  If you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers.   Your WildBeast instance should now be good to go. Start both the  wildbeast_arango_1  and  wildbeast_lavalink_1  containers, and when they're ready, start  wildbeast_wildbeast_1 . Wait for it to start, and if your output roughly resembles the following, you're set.   You can test the bot by running the  ping  command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up.  If you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below.  Enjoy your bot and have fun!  \n         Go to  https://imgflip.com , create an account and input your username and password here.\u00a0 \u21a9 \u21a9    Go to  https://www.twitch.tv/settings/connections , register an application and input the client ID you get from that here.\u00a0 \u21a9    Go to  https://api.imgur.com/oauth2/addclient , register an application and input the client ID (Not secret!) you get from that here.\u00a0 \u21a9    Set to 1 to enable this behaviour, or to 0 to disable it.\u00a0 \u21a9 \u21a9",
            "title": "Running the bot"
        },
        {
            "location": "/install_linux/",
            "text": "This guide will detail how to install and setup WildBeast on Linux.\n\n\nPrerequisites\n\u00b6\n\n\n\n\nLinux system\n\n\nOS: Docker officially supports \nthese distributions\n, but others may be used as well\n\n\n\n\n\n\nSudo privileges on the server\n\n\nYou will also need a text editor. For command-line you may use Nano, Vim etc. while standalone editors like Visual Studio Code, Atom and Brackets are fine for systems with a desktop environment installed.\n\n\n\n\nInstallation\n\u00b6\n\n\nYou will need to install Docker and Docker Compose to use WildBeast. Find the guide for your distribution \nhere (Docker)\n and \nhere (Compose)\n. For other distributions, you may use your own resources.\n\n\nYou will also need Git for downloading WildBeast. Git is available on most distribution-specific package managers. Refer to an instruction manual for your distribution for installation instructions.\n\n\nComplete the appropriate installation procedure and verify Docker is functional before proceeding.\n\n\nSetup\n\u00b6\n\n\nWith that done, clone the WildBeast GitHub repository by running \ngit clone https://github.com/TheSharks/WildBeast.git\n. After cloning, change to the \nWildBeast\n directory and open \n.env.example\n with your preferred text editor.\n\n\nEdit the following parameters:\n\n\n\n\nBOT_TOKEN\n: Add your Discord bot token here. (Eg. \ncreate a bot and add it to a server\n)\n\n\nBOT_PREFIX\n: Add your preferred command prefix here. (Eg. \n!\n, \n++\n, etc.)\n\n\nWILDBEAST_MASTERS\n: Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg. \n152664793587777537|10790402390177792\n and so on)\n\n\n\n\nIf you're running a custom ArangoDB instance and wish to use it, you can also edit \nARANGO_USERNAME\n, \nARANGO_PASSWORD\n, \nARANGO_DATABASE\n and \nARANGO_URI\n now. The same goes for the \nLAVA_NODES\n variable in case you're running a custom Lavalink instance.\n\n\nWhen done, save the file as \n.env\n. Then run \nsudo docker-compose up --no-start\n in the WildBeast directory. When the container creation is done, run \nsudo docker ps -a\n and make sure that you have an output that resembles the following.\n\n\n\n\nWarning\n\n\nIt is paramount you save the file as \n.env\n. Do not leave it as \n.env.example\n, name it \n.env.txt\n or anything similar. Docker will not recognise it in this case.\n\n\n\n\n\n\nKnown docker-compose issues\n\n\nOn certain systems or setups Docker may refuse to run commands properly without \nsudo\n and will throw cryptic errors as a result. Try running the command with \nsudo\n before consulting help and also check your system process control to see if Docker is running.\n\n\n\n\n\n\nInitialising\n\u00b6\n\n\nTo initialise WildBeast, run the following commands. Leave a second or two between each to account for startup times.\n\n\n\n\nNote\n\n\nIf you configured a custom ArangoDB instance previously, omit the first command.\n\n\n\n\nsudo docker start wildbeast_arango_1\nsudo docker start wildbeast_install_1\nsudo docker logs wildbeast_install_1\n\n\n\n\n\nIf your output resembles the following, you're good to go.\n\n\n\n\nAfter this, you will no longer need to run \nwildbeast_install_1\n unless you wish to repair the database - it's only around for database initialisation.\n\n\nConfiguration\n\u00b6\n\n\nNow it's time to do some additional configuration. The minimum defaults have been defined already through docker-compose.yml, but the bot will only have fairly limited functionality if left at this state. Open \n.env\n again.\n\n\nHere is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nCommands using this\n\n\nType\n\n\n\n\n\n\n\n\n\n\nIMGFLIP_USERNAME\n\n\nImgflip username.\n1\n\n\nmeme\n\n\nString\n\n\n\n\n\n\nIMGFLIP_PASSWORD\n\n\nImgflip password.\n1\n\n\nmeme\n\n\nString\n\n\n\n\n\n\nIMGUR_KEY\n\n\nImgur API key.\n2\n\n\nrandommeme\n\n\nString\n\n\n\n\n\n\nTWITCH_ID\n\n\nTwitch client ID.\n3\n\n\ntwitch\n\n\nString\n\n\n\n\n\n\nWILDBEAST_VOICE_PERSIST\n\n\nPrevent the bot from automatically leaving a voice channel after a playlist has ended.\n\n\nMusic\n\n\nNumber (0/1)\n4\n\n\n\n\n\n\nWILDBEAT_DISABLE_MUSIC\n\n\nPrevent all music functionality from being used.\n\n\nMusic\n\n\nNumber (0/1)\n4\n\n\n\n\n\n\nWILDBEAST_LANGUAGE\n\n\nSet the language of the bot. Currently only English is available.\n\n\nAll\n\n\nString\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nThere are more environment variables that can be defined as well. You can find the full reference in \n.env.example\n.\n\n\nHowever, we do not recommend editing variables in the \nInternal configuration\n section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with.\n\n\n\n\nWhen you're done, save the file and close the editor.\n\n\nRunning the bot\n\u00b6\n\n\n\n\nNote\n\n\nIf you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers.\n\n\n\n\nYour WildBeast instance should now be good to go. Run the following commands in your terminal, waiting a second or two between each:\n\n\nsudo docker start wildbeast_arango_1 \n# If you didn't start it or stopped it\n\nsudo docker start wildbeast_lavalink_1\nsudo docker start wildbeast_wildbeast_1\nsudo docker logs wildbeast_wildbeast_1\n\n\n\n\n\nIf your output resembles the following, your bot is all set.\n\n\n\n\n\n\nConnect ECONNREFUSED <IP>:80\n\n\nAn error message saying \nFATAL: Error: connect ECONNREFUSED <your IP>:80\n may happen when the \nwildbeast_wildbeast_1\n container is started too quickly and the Lavalink server is not ready. Wait a few seconds, then run \nsudo docker restart wildbeast_wildbeast_1\n and check the logs again.\n\n\n\n\nYou can test the bot by running the \nping\n command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up.\n\n\nIf you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below.\n\n\nEnjoy your bot and have fun!\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nGo to \nhttps://imgflip.com\n, create an account and input your username and password here.\u00a0\n\u21a9\n\u21a9\n\n\n\n\n\n\nGo to \nhttps://www.twitch.tv/settings/connections\n, register an application and input the client ID you get from that here.\u00a0\n\u21a9\n\n\n\n\n\n\nGo to \nhttps://api.imgur.com/oauth2/addclient\n, register an application and input the client ID (Not secret!) you get from that here.\u00a0\n\u21a9\n\n\n\n\n\n\nSet to 1 to enable this behaviour, or to 0 to disable it.\u00a0\n\u21a9\n\u21a9",
            "title": "Linux installation"
        },
        {
            "location": "/install_linux/#prerequisites",
            "text": "Linux system  OS: Docker officially supports  these distributions , but others may be used as well    Sudo privileges on the server  You will also need a text editor. For command-line you may use Nano, Vim etc. while standalone editors like Visual Studio Code, Atom and Brackets are fine for systems with a desktop environment installed.",
            "title": "Prerequisites"
        },
        {
            "location": "/install_linux/#installation",
            "text": "You will need to install Docker and Docker Compose to use WildBeast. Find the guide for your distribution  here (Docker)  and  here (Compose) . For other distributions, you may use your own resources.  You will also need Git for downloading WildBeast. Git is available on most distribution-specific package managers. Refer to an instruction manual for your distribution for installation instructions.  Complete the appropriate installation procedure and verify Docker is functional before proceeding.",
            "title": "Installation"
        },
        {
            "location": "/install_linux/#setup",
            "text": "With that done, clone the WildBeast GitHub repository by running  git clone https://github.com/TheSharks/WildBeast.git . After cloning, change to the  WildBeast  directory and open  .env.example  with your preferred text editor.  Edit the following parameters:   BOT_TOKEN : Add your Discord bot token here. (Eg.  create a bot and add it to a server )  BOT_PREFIX : Add your preferred command prefix here. (Eg.  ! ,  ++ , etc.)  WILDBEAST_MASTERS : Add a pipe-delimited list of user IDs you wish to set as super users here. (Eg.  152664793587777537|10790402390177792  and so on)   If you're running a custom ArangoDB instance and wish to use it, you can also edit  ARANGO_USERNAME ,  ARANGO_PASSWORD ,  ARANGO_DATABASE  and  ARANGO_URI  now. The same goes for the  LAVA_NODES  variable in case you're running a custom Lavalink instance.  When done, save the file as  .env . Then run  sudo docker-compose up --no-start  in the WildBeast directory. When the container creation is done, run  sudo docker ps -a  and make sure that you have an output that resembles the following.   Warning  It is paramount you save the file as  .env . Do not leave it as  .env.example , name it  .env.txt  or anything similar. Docker will not recognise it in this case.    Known docker-compose issues  On certain systems or setups Docker may refuse to run commands properly without  sudo  and will throw cryptic errors as a result. Try running the command with  sudo  before consulting help and also check your system process control to see if Docker is running.",
            "title": "Setup"
        },
        {
            "location": "/install_linux/#initialising",
            "text": "To initialise WildBeast, run the following commands. Leave a second or two between each to account for startup times.   Note  If you configured a custom ArangoDB instance previously, omit the first command.   sudo docker start wildbeast_arango_1\nsudo docker start wildbeast_install_1\nsudo docker logs wildbeast_install_1  If your output resembles the following, you're good to go.   After this, you will no longer need to run  wildbeast_install_1  unless you wish to repair the database - it's only around for database initialisation.",
            "title": "Initialising"
        },
        {
            "location": "/install_linux/#configuration",
            "text": "Now it's time to do some additional configuration. The minimum defaults have been defined already through docker-compose.yml, but the bot will only have fairly limited functionality if left at this state. Open  .env  again.  Here is a list of environment variables we recommend you define or at least consider defining. Check the footnotes for brief instructions on how to get the API keys below.     Variable  Description  Commands using this  Type      IMGFLIP_USERNAME  Imgflip username. 1  meme  String    IMGFLIP_PASSWORD  Imgflip password. 1  meme  String    IMGUR_KEY  Imgur API key. 2  randommeme  String    TWITCH_ID  Twitch client ID. 3  twitch  String    WILDBEAST_VOICE_PERSIST  Prevent the bot from automatically leaving a voice channel after a playlist has ended.  Music  Number (0/1) 4    WILDBEAT_DISABLE_MUSIC  Prevent all music functionality from being used.  Music  Number (0/1) 4    WILDBEAST_LANGUAGE  Set the language of the bot. Currently only English is available.  All  String      Tip  There are more environment variables that can be defined as well. You can find the full reference in  .env.example .  However, we do not recommend editing variables in the  Internal configuration  section lest you know what you're doing. These variables exist for development and/or internal purposes and can have unintended side effects if messed with.   When you're done, save the file and close the editor.",
            "title": "Configuration"
        },
        {
            "location": "/install_linux/#running-the-bot",
            "text": "Note  If you're running custom non-Docker instances for ArangoDB and Lavalink, and have configured WildBeast to use them, omit starting the first two containers.   Your WildBeast instance should now be good to go. Run the following commands in your terminal, waiting a second or two between each:  sudo docker start wildbeast_arango_1  # If you didn't start it or stopped it \nsudo docker start wildbeast_lavalink_1\nsudo docker start wildbeast_wildbeast_1\nsudo docker logs wildbeast_wildbeast_1  If your output resembles the following, your bot is all set.    Connect ECONNREFUSED <IP>:80  An error message saying  FATAL: Error: connect ECONNREFUSED <your IP>:80  may happen when the  wildbeast_wildbeast_1  container is started too quickly and the Lavalink server is not ready. Wait a few seconds, then run  sudo docker restart wildbeast_wildbeast_1  and check the logs again.   You can test the bot by running the  ping  command (With your prefix) in a text channel that the bot can see. If it answers \"Pong!\", then your bot is set up.  If you have further questions or need help with something, we'd be happy to help. You can find a link to the official server below.  Enjoy your bot and have fun!  \n         Go to  https://imgflip.com , create an account and input your username and password here.\u00a0 \u21a9 \u21a9    Go to  https://www.twitch.tv/settings/connections , register an application and input the client ID you get from that here.\u00a0 \u21a9    Go to  https://api.imgur.com/oauth2/addclient , register an application and input the client ID (Not secret!) you get from that here.\u00a0 \u21a9    Set to 1 to enable this behaviour, or to 0 to disable it.\u00a0 \u21a9 \u21a9",
            "title": "Running the bot"
        }
    ]
}